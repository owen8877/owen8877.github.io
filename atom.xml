<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>xDroid&#39;s Blog</title>
  
  <subtitle>假装高冷的Geek</subtitle>
  <link href="https://blog.xdrd.me/atom.xml" rel="self"/>
  
  <link href="https://blog.xdrd.me/"/>
  <updated>2024-01-23T18:33:06.561Z</updated>
  <id>https://blog.xdrd.me/</id>
  
  <author>
    <name>xDroid</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>React js、ChatGPT 和打卡 bot（二）：第一份活</title>
    <link href="https://blog.xdrd.me/2024/01/telegram-bot-2/"/>
    <id>https://blog.xdrd.me/2024/01/telegram-bot-2/</id>
    <published>2024-01-20T16:33:10.000Z</published>
    <updated>2024-01-23T18:33:06.561Z</updated>
    
    <content type="html"><![CDATA[<a href="/2024/01/telegram-bot-1/" title="React.js、ChatGPT 和打卡 bot（一）：A Humble Start">上一篇</a>里我们提到了想要做一个 Telegram bot 的想法，那么这一篇里我们来开始写第一个打卡工具吧！<p>那这一个 Leetcode 打卡工具的使用场景大概是这样的：</p><ol><li>我们向 bot 转发当天写完题目的网址，它会把这个网址和当天的日期保存下来</li><li>通过某种 query 命令，我们可以查询已经存了的打卡有哪些<br>就两个要求，应该很简单吧！（大概……瑟瑟发抖</li></ol><span id="more"></span><h2 id="Leetcode-网址长什么样子呢？"><a href="#Leetcode-网址长什么样子呢？" class="headerlink" title="Leetcode 网址长什么样子呢？"></a>Leetcode 网址长什么样子呢？</h2><p>还真的问倒我了，让我先去做一道题看看（</p><p>今天的是一道 medium，提交完成之后会跳转道这样一个网址：</p><pre class="shiki github-light" style="background-color: #fff" tabindex="0"><code><span class="line"><span style="color: #24292e">https://leetcode.com/problems/minimum-falling-path-sum/submissions/1151151707/?envType=daily-question&amp;envId=2024-01-19</span></span></code></pre><p>可以看到有时间、提交 id 和题目的名字，那么我们用一个正则表达式提取一下(ChatGPT 真聪明）：</p><pre class="shiki github-light" style="background-color: #fff" tabindex="0"><code><span class="line"><span style="color: #D73A49">const</span><span style="color: #24292E"> </span><span style="color: #005CC5">url</span><span style="color: #24292E"> </span><span style="color: #D73A49">=</span><span style="color: #24292E"> </span><span style="color: #032F62">&quot;https://leetcode.com/problems/minimum-falling-path-sum/submissions/1151151707/?envType=daily-question&amp;envId=2024-01-19&quot;</span><span style="color: #24292E">;</span></span><span class="line"><span style="color: #D73A49">const</span><span style="color: #24292E"> </span><span style="color: #005CC5">regex</span><span style="color: #24292E"> </span><span style="color: #D73A49">=</span><span style="color: #032F62"> /</span><span style="color: #22863A; font-weight: bold">\/</span><span style="color: #032F62">problems</span><span style="color: #22863A; font-weight: bold">\/</span><span style="color: #032F62">(</span><span style="color: #005CC5">[</span><span style="color: #D73A49">^</span><span style="color: #22863A; font-weight: bold">\/</span><span style="color: #005CC5">]</span><span style="color: #D73A49">+</span><span style="color: #032F62">)</span><span style="color: #22863A; font-weight: bold">\/</span><span style="color: #032F62">submissions</span><span style="color: #22863A; font-weight: bold">\/</span><span style="color: #032F62">(</span><span style="color: #005CC5">\d</span><span style="color: #D73A49">+</span><span style="color: #032F62">)</span><span style="color: #22863A; font-weight: bold">\/\?</span><span style="color: #005CC5">.</span><span style="color: #D73A49">*</span><span style="color: #032F62">envId=(</span><span style="color: #005CC5">\d</span><span style="color: #D73A49">&#123;4&#125;</span><span style="color: #032F62">)-(</span><span style="color: #005CC5">\d</span><span style="color: #D73A49">&#123;2&#125;</span><span style="color: #032F62">)-(</span><span style="color: #005CC5">\d</span><span style="color: #D73A49">&#123;2&#125;</span><span style="color: #032F62">)/</span><span style="color: #24292E">;</span></span><span class="line"><span style="color: #D73A49">const</span><span style="color: #24292E"> </span><span style="color: #005CC5">match</span><span style="color: #24292E"> </span><span style="color: #D73A49">=</span><span style="color: #24292E"> url.</span><span style="color: #6F42C1">match</span><span style="color: #24292E">(regex);</span></span></code></pre><h2 id="单元测试！"><a href="#单元测试！" class="headerlink" title="单元测试！"></a>单元测试！</h2><p>怎么能忘了单元测试呢！让我们看看<a href="//bun.sh/docs/test/writing">怎么搞</a>的：</p><ul><li>入口是 <code>bun test</code>，</li><li>会递归执行 <code>*.test.ts</code> 或者 <code>*_test.ts</code> 名字的文件，</li><li>测试套件函数有 <code>import &#123; expect, test &#125; from &quot;bun:test&quot;;</code>。</li></ul><h2 id="数据库怎么搞？"><a href="#数据库怎么搞？" class="headerlink" title="数据库怎么搞？"></a>数据库怎么搞？</h2><p>之前写 mongodb 感觉还可以，但是无奈体积实在是太大了，所以这次想换个库用用看。</p><p>那么这次我用的是 <a href="//www.prisma.io/docs/getting-started/quickstart">prisma</a>，有 ORM 还有 typescript 支持，算是不错啦。</p><p>这里遇到一个问题是怎么把 sqlite 的初始化和 docker compose 结合起来。结果折腾一晚上还是没看懂怎么搞，所以第二天早上转投 postgres（画风一转）。</p><p>目前大概的解决方案是这样的：</p><ol><li>postgres 有两个 compose 文件，一个负责 dev（由 docker 长期跑，这样 bun 只需要启动 <code>index.ts</code>），另一个做本地的测试，同时复用为服务端的配置文件。</li><li>本地和服务器的 database directory 由 production 和 test 两个文件夹里的 <code>.env</code> 文件指定，然后在各自的 <code>compose.yaml</code> 文件里读取出来。</li><li>prisma 有一个生成 client 的 migrate 工具，应该是每次修改完 schema 之后都要重新跑一遍的，所以我就放在 <code>package.json</code> 的一个脚本里了。</li></ol><h2 id="嗯……嗯嗯？"><a href="#嗯……嗯嗯？" class="headerlink" title="嗯……嗯嗯？"></a>嗯……嗯嗯？</h2><p>然后我在这里卡了好几个小时……等到回过神来的时候天都已经黑了（</p><p>大概是遇到这么问题了呢，就是 ts application 所在的容器死活连不上 postgres。我一开始以为是端口穿透一类的问题，还使劲问 ChatGPT，还去看 Github 上<a href="//github.com/grdnmsz/prisma-docker">有人</a>做了一个 MVP 出来可以跑。然后我就使劲想为什么我的不能跑，最后在一次不起眼的比较中我发现它写的数据库地址</p><pre class="shiki github-light" style="background-color: #fff" tabindex="0"><code><span class="line"><span style="color: #24292e">DATABASE_URL=&quot;postgresql://...@postgres:5432/...&quot;</span></span></code></pre><p>居然不是用 localhost！真的是好坑。</p><p>还有一个问题是 bun 和 prisma 的相性也不太好，至少<a href="//bun.sh/guides/ecosystem/prisma">官方文档</a>说</p><blockquote><p>Note - At the moment Prisma needs Node.js to be installed to run certain generation code. Make sure Node.js is installed in the environment where you’re running bunx prisma commands.</p></blockquote><p>能连上数据库之后我就尝试从 Telegram 那边发个消息过来，结果乐极生悲</p><pre class="shiki github-light" style="background-color: #fff" tabindex="0"><code><span class="line"><span style="color: #24292e">Database schema is up to date!</span></span><span class="line"><span style="color: #24292e">up and running</span></span><span class="line"><span style="color: #24292e">Segmentation fault (core dumped)</span></span><span class="line"><span style="color: #24292e">error: script &quot;start:migrate:prod&quot; exited with code 139</span></span></code></pre><p>呃……我们继续 debug 吧。</p><h2 id="宿主-distro"><a href="#宿主-distro" class="headerlink" title="宿主 distro"></a>宿主 distro</h2><p>后来我发现可能是和宿主的 distro 有关系，毕竟上一节里面我们也提到说还是要安装 node 的。目前我是这么解决的：</p><pre class="shiki github-light" style="background-color: #fff" tabindex="0"><code><span class="line"><span style="color: #D73A49">FROM</span><span style="color: #24292E"> oven/bun:debian </span><span style="color: #D73A49">as</span><span style="color: #24292E"> base</span></span><span class="line"><span style="color: #D73A49">RUN</span><span style="color: #24292E"> apt-get -y update; apt-get -y install curl</span></span><span class="line"><span style="color: #D73A49">ARG</span><span style="color: #24292E"> NODE_VERSION=21</span></span><span class="line"><span style="color: #D73A49">RUN</span><span style="color: #24292E"> curl -L https://raw.githubusercontent.com/tj/n/master/bin/n -o n \</span></span><span class="line"><span style="color: #24292E">  &amp;&amp; bash n $NODE_VERSION \</span></span><span class="line"><span style="color: #24292E">  &amp;&amp; rm n \</span></span><span class="line"><span style="color: #24292E">  &amp;&amp; npm install -g n</span></span></code></pre><h2 id="好文明"><a href="#好文明" class="headerlink" title="好文明"></a>好文明</h2><ul><li>Typescript 可以很方便地写 data bean 了（见 <a href="//www.typescriptlang.org/docs/handbook/2/objects.html">Object Types</a>）。</li><li><code>mock</code> 是个好东西，可以方便地<a href="//bun.sh/docs/test/mocks">覆盖</a>一些函数的行为，然后就可以在单元测试里短路了（比如跳过从外界读入文件内容）。更黑魔法的东西是 <code>.spyOn</code>，居然可以窥探到没有 export 过的函数（谁叫 ts 的访问模型做的这么粗暴呢）（虽然最后还是因为不好用所以暂时放弃了）（哦最后还是用了更多的黑魔法 work 了）。</li><li><a href="//www.typescriptlang.org/docs/handbook/2/functions.html#function-overloads">函数重载</a>终于看起来好一点了，虽然还是要手写 undefined 的判断。</li><li>本来以为 bun test runner 可以测试改时间的，结果<pre class="shiki github-light" style="background-color: #fff" tabindex="0"><code><span class="line"><span style="color: #24292e">94 | function setSystemTime(arg0: Date) &#123;</span></span><span class="line"><span style="color: #24292e">95 |   throw new Error(&quot;Function not implemented.&quot;);</span></span><span class="line"><span style="color: #24292e">             ^</span></span><span class="line"><span style="color: #24292e">error: Function not implemented.</span></span></code></pre>（咚咚咚）查了一下官方文档说<blockquote><p>Timers — Note that we have not implemented builtin support for mocking timers yet, but this is on the roadmap.</p></blockquote></li></ul><h2 id="哪天做的题？"><a href="#哪天做的题？" class="headerlink" title="哪天做的题？"></a>哪天做的题？</h2><p>现在遇到的一个问题是 Leon 告诉我说，他那边做完题之后网址是不含日期的，所以我可能得自己想办法找到哪一天对应哪一题。</p><p>我问了问 ChatGPT，ta 给我仙人指路到了<a href="//leetcode.com/explore/featured/card/january-leetcoding-challenge-2024/">这个网页</a> which used to be working 但是现在他们把这个网页移除了。emmm 看起来不太好办的样子。</p><p>BTW 现在 leetcode 的每日任务放到了 problems 页面的右上角（而且是用非常愚蠢的 UTC 时区计时）；拿开发者工具看了一下，似乎 leetcode 现在在用 GraphQL。我试着把请求复制到 ts 里，去掉 cookies 一类的东西运行了一下，看起来居然能正常请求到！也是少见。</p><p>不过我还是遇到了类型系统的问题，毕竟原生 <code>fetch</code> 函数的签名是</p><pre class="shiki github-light" style="background-color: #fff" tabindex="0"><code><span class="line"><span style="color: #D73A49">export</span><span style="color: #24292E"> </span><span style="color: #D73A49">declare</span><span style="color: #24292E"> </span><span style="color: #D73A49">class</span><span style="color: #24292E"> </span><span style="color: #6F42C1">Response</span><span style="color: #24292E"> </span><span style="color: #D73A49">implements</span><span style="color: #24292E"> </span><span style="color: #6F42C1">BodyMixin</span><span style="color: #24292E"> &#123;</span></span><span class="line"><span style="color: #24292E">  </span><span style="color: #6A737D">// ...</span></span><span class="line"><span style="color: #24292E">  </span><span style="color: #D73A49">readonly</span><span style="color: #24292E"> </span><span style="color: #6F42C1">text</span><span style="color: #D73A49">:</span><span style="color: #24292E"> () </span><span style="color: #D73A49">=&gt;</span><span style="color: #24292E"> </span><span style="color: #6F42C1">Promise</span><span style="color: #24292E">&lt;</span><span style="color: #005CC5">string</span><span style="color: #24292E">&gt;</span></span><span class="line"><span style="color: #24292E">  </span><span style="color: #6A737D">// ...</span></span><span class="line"><span style="color: #24292E">&#125;</span></span></code></pre><p>我看了一下 graphQL 返回的 json 长这样：</p><pre class="shiki github-light" style="background-color: #fff" tabindex="0"><code><span class="line"><span style="color: #24292E">&#123;</span><span style="color: #B31D28; font-style: italic">data</span><span style="color: #24292E">: &#123;</span></span><span class="line"><span style="color: #24292E">    </span><span style="color: #B31D28; font-style: italic">dailyCodingChallengeV2</span><span style="color: #24292E">: &#123;</span></span><span class="line"><span style="color: #24292E">      </span><span style="color: #B31D28; font-style: italic">challenges</span><span style="color: #24292E">: [[</span><span style="color: #B31D28; font-style: italic">Object</span><span style="color: #24292E"> </span><span style="color: #B31D28; font-style: italic">...</span><span style="color: #24292E">], </span><span style="color: #B31D28; font-style: italic">...</span><span style="color: #24292E">],</span></span><span class="line"><span style="color: #24292E">      </span><span style="color: #B31D28; font-style: italic">weeklyChallenges</span><span style="color: #24292E">: [[</span><span style="color: #B31D28; font-style: italic">Object</span><span style="color: #24292E"> </span><span style="color: #B31D28; font-style: italic">...</span><span style="color: #24292E">], </span><span style="color: #B31D28; font-style: italic">...</span><span style="color: #24292E">],</span></span><span class="line"><span style="color: #24292E">    &#125;,</span></span><span class="line"><span style="color: #24292E">&#125;,&#125;</span></span></code></pre><p>搞得我只好写出这种代码：</p><pre class="shiki github-light" style="background-color: #fff" tabindex="0"><code><span class="line"><span style="color: #D73A49">const</span><span style="color: #24292E"> </span><span style="color: #005CC5">data</span><span style="color: #24292E"> </span><span style="color: #D73A49">=</span><span style="color: #24292E"> </span><span style="color: #D73A49">await</span><span style="color: #24292E"> response.</span><span style="color: #6F42C1">json</span><span style="color: #24292E">() </span><span style="color: #D73A49">as</span><span style="color: #24292E"> &#123; </span><span style="color: #E36209">data</span><span style="color: #D73A49">:</span><span style="color: #24292E"> &#123; </span><span style="color: #E36209">dailyCodingChallengeV2</span><span style="color: #D73A49">:</span><span style="color: #24292E"> &#123; </span><span style="color: #E36209">challenges</span><span style="color: #D73A49">:</span><span style="color: #24292E"> </span><span style="color: #6F42C1">ChallengeBean</span><span style="color: #24292E">[] &#125; &#125; &#125;;</span></span><span class="line"><span style="color: #D73A49">const</span><span style="color: #24292E"> </span><span style="color: #005CC5">challenges</span><span style="color: #24292E"> </span><span style="color: #D73A49">=</span><span style="color: #24292E"> data.data.dailyCodingChallengeV2.challenges;</span></span></code></pre><h2 id="Unit-test-again"><a href="#Unit-test-again" class="headerlink" title="Unit test, again"></a>Unit test, again</h2><p>现在写代码总算有点眉目了：如果遇到没有日期的网址，那就先查本地缓存，如果也没有的话就到 leetcode 上查找最近 12 个月里面有没有这个题。</p><p>Prisma 似乎有自己一套 mock test 的<a href="//www.prisma.io/docs/orm/prisma-client/testing/unit-testing">办法</a>，可惜我并看不懂，所以还是老老实实用 <code>beforeAll()</code> 一类的方法真的写到数据库里算了。</p><p>（又睡了一觉）</p><p>想了一下还是把单元测试加回到 Dockerfile 里面去好了，但是试了一下发现跑 test 的时候并没有 prisma，所以有些数据库的东西跑不通（听起来很头疼的样子）。所以 prisma 还是得用 mock 的方式在 test 里跑。</p><p>这里查插一个怎么<a href="//stackoverflow.com/questions/38946683/how-to-test-dockerignore-file">检查 <code>.dockerignore</code> 文件是否起效果的命令</a>：</p><pre class="shiki github-light" style="background-color: #fff" tabindex="0"><code><span class="line"><span style="color: #6F42C1">$</span><span style="color: #24292E"> </span><span style="color: #032F62">rsync</span><span style="color: #24292E"> </span><span style="color: #005CC5">-avn</span><span style="color: #24292E"> </span><span style="color: #032F62">.</span><span style="color: #24292E"> </span><span style="color: #032F62">/dev/shm</span><span style="color: #24292E"> </span><span style="color: #005CC5">--exclude-from</span><span style="color: #24292E"> </span><span style="color: #032F62">.dockerignore</span></span></code></pre><p>看起来我的 <code>.env</code> 文件也没有打包进去啊……奇怪……</p><p>emmm 又看了一会儿现在的解决方案，好像 <a href="//www.prisma.io/docs/orm/prisma-client/testing/unit-testing">prisma 的单元测试</a>用的 mock 又是一些 jest 的黑魔法，和 bun 不是很兼容。索性我把关于数据库的测试在这里短路掉算了。</p><h2 id="CI"><a href="#CI" class="headerlink" title="CI"></a>CI</h2><p>As a closing remark，我们来看看怎么搞 CI。</p><p>因为不会写 workflow file，所以直接问了 ChatGPT（然后发现 workflows 文件夹少了一个 s 导致 Github 识别不出来）。现在他们已经把 CI 做的相当好了，刚才的一个 commit 也<a href="//github.com/owen8877/shining/actions/runs/7630071729">自动 build</a> 成功了，yeah！</p><h2 id="下期预告"><a href="#下期预告" class="headerlink" title="下期预告"></a>下期预告</h2><p>TBA</p>]]></content>
    
    
    <summary type="html">&lt;a href=&quot;/2024/01/telegram-bot-1/&quot; title=&quot;React.js、ChatGPT 和打卡 bot（一）：A Humble Start&quot;&gt;上一篇&lt;/a&gt;里我们提到了想要做一个 Telegram bot 的想法，那么这一篇里我们来开始写第一个打卡工具吧！
&lt;p&gt;那这一个 Leetcode 打卡工具的使用场景大概是这样的：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;我们向 bot 转发当天写完题目的网址，它会把这个网址和当天的日期保存下来&lt;/li&gt;
&lt;li&gt;通过某种 query 命令，我们可以查询已经存了的打卡有哪些&lt;br&gt;就两个要求，应该很简单吧！（大概……瑟瑟发抖&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="gizmo" scheme="https://blog.xdrd.me/categories/gizmo/"/>
    
    
    <category term="chatgpt" scheme="https://blog.xdrd.me/tags/chatgpt/"/>
    
    <category term="telegram" scheme="https://blog.xdrd.me/tags/telegram/"/>
    
    <category term="typescript" scheme="https://blog.xdrd.me/tags/typescript/"/>
    
    <category term="docker" scheme="https://blog.xdrd.me/tags/docker/"/>
    
    <category term="prisma" scheme="https://blog.xdrd.me/tags/prisma/"/>
    
    <category term="leetcode" scheme="https://blog.xdrd.me/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>React.js、ChatGPT 和打卡 bot（一）：A Humble Start</title>
    <link href="https://blog.xdrd.me/2024/01/telegram-bot-1/"/>
    <id>https://blog.xdrd.me/2024/01/telegram-bot-1/</id>
    <published>2024-01-19T16:33:10.000Z</published>
    <updated>2024-01-23T18:32:25.774Z</updated>
    
    <content type="html"><![CDATA[<p>这次整个大新闻（</p><p>最近陪 Leon 刷题找工考证什么的，需要一些自动记录打卡的小程序帮助记录和监督，顺便整个类似 Github 的打卡界面玩玩（大概就是如下图所示的玩意儿</p><p><img src="//i.stack.imgur.com/V2vdR.png" alt="抱歉 Bloggify/github-calendar 插件坏了只能盗个图了"></p><p>Anyway，先列举一下我们的需求&#x2F;设想有哪些：</p><ol><li>支持以下项目的打卡</li></ol><ul><li>Leetcode</li><li>绿皮书（发送题目名字，然后做字符串匹配）</li><li>面试进度追踪</li></ul><ol start="2"><li>通过 Telegram bot 接口交互，降低前端开发成本</li><li>最重要的还有，基于 ChatGPT 的开发（心水很久了）</li></ol><span id="more"></span><h2 id="配置开发环境"><a href="#配置开发环境" class="headerlink" title="配置开发环境"></a>配置开发环境</h2><p>水一些对话:</p><blockquote><p>Me: Hi! Think of yourself as a senior full-stack developer. Could you guide me how to build an event-tracking bot that…<br>ChatGPT: Sure,… 1. Install Node.js and npm:… 2.Install TypeScript globally:… 3…<br>Me: Looks good! But prior to that, do you have any suggestions regarding a pain-less deployment practice? Something like docker?<br>ChatGPT: Certainly! Using Docker… 1.Install Docker:… 2.Create a Dockerfile:…</p></blockquote><p>好吧，我还是先安装一下 docker 之类的工具再说吧</p><h2 id="Vscode"><a href="#Vscode" class="headerlink" title="Vscode"></a>Vscode</h2><p>先用 <code>yay</code> 安装，然后安装 Docker 插件。本来准备如法炮制 Copilot 插件的，但是 marketplace 里似乎搜不到。ChatGPT 对此装聋作哑，google 了一下发现是 ArchLinux 有若干个 VSCode 的版本（而我不幸装了开源的版本），见 <a href="//wiki.archlinux.org/title/Visual_Studio_Code#Extensions_support">Visual Studio Code - Extensions support</a>。</p><p>Sign in to GitHub 之后我才想起来我的学生身份又没有验证通过，真是谢谢你全家了（微信笑脸</p><p>找了一下代替品，决定用 <a href="//github.com/fauxpilot/fauxpilot">FauxPilot</a> 试试看（如果显卡没有爆炸的话）。</p><p>（八百年后）</p><p>在经历一通折腾 + google 之后，终于把 fauxpilot 在 docker 里跑起来了！似乎也没有听到显卡风扇狂转，不过硬盘上倒是占了不少空间。</p><h2 id="Nodejs-TS"><a href="#Nodejs-TS" class="headerlink" title="Nodejs &amp; TS"></a>Nodejs &amp; TS</h2><p>用了 node 官方的镜像 <code>21-alpine3.18</code>，然后跟着 ChatGPT 的指导尝试了 <code>tsc --init</code> 和 telegram 的 node 包。不过 TS 会抱怨 node-telegram-bot-api 的类型，所以又安装了 <a href="//www.npmjs.com/package/@types/node-telegram-bot-api">@types&#x2F;node-telegram-bot-api</a>。</p><p>ChatGPT 给了这个 smoke test：</p><pre class="shiki github-light" style="background-color: #fff" tabindex="0"><code><span class="line"><span style="color: #D73A49">import</span><span style="color: #24292E"> TelegramBot </span><span style="color: #D73A49">from</span><span style="color: #24292E"> </span><span style="color: #032F62">&#39;node-telegram-bot-api&#39;</span><span style="color: #24292E">;</span></span><span class="line"></span><span class="line"><span style="color: #D73A49">const</span><span style="color: #24292E"> </span><span style="color: #005CC5">token</span><span style="color: #24292E"> </span><span style="color: #D73A49">=</span><span style="color: #24292E"> </span><span style="color: #032F62">&#39;YOUR_TELEGRAM_BOT_TOKEN&#39;</span><span style="color: #24292E">;</span></span><span class="line"><span style="color: #D73A49">const</span><span style="color: #24292E"> </span><span style="color: #005CC5">bot</span><span style="color: #24292E"> </span><span style="color: #D73A49">=</span><span style="color: #24292E"> </span><span style="color: #D73A49">new</span><span style="color: #24292E"> </span><span style="color: #6F42C1">TelegramBot</span><span style="color: #24292E">(token, &#123; polling: </span><span style="color: #005CC5">true</span><span style="color: #24292E"> &#125;);</span></span><span class="line"></span><span class="line"><span style="color: #24292E">bot.</span><span style="color: #6F42C1">onText</span><span style="color: #24292E">(</span><span style="color: #032F62">/</span><span style="color: #22863A; font-weight: bold">\/</span><span style="color: #032F62">start/</span><span style="color: #24292E">, (</span><span style="color: #E36209">msg</span><span style="color: #24292E">) </span><span style="color: #D73A49">=&gt;</span><span style="color: #24292E"> &#123;</span></span><span class="line"><span style="color: #24292E">  </span><span style="color: #D73A49">const</span><span style="color: #24292E"> </span><span style="color: #005CC5">chatId</span><span style="color: #24292E"> </span><span style="color: #D73A49">=</span><span style="color: #24292E"> msg.chat.id;</span></span><span class="line"><span style="color: #24292E">  bot.</span><span style="color: #6F42C1">sendMessage</span><span style="color: #24292E">(chatId, </span><span style="color: #032F62">&#39;Hello! I am your event-tracking bot.&#39;</span><span style="color: #24292E">);</span></span><span class="line"><span style="color: #24292E">&#125;);</span></span></code></pre><p>看起来没啥问题，token 可能之后要用一些方式避免硬编码，不过 anyways，运行 <code>tsc &amp;&amp; node index.js</code> 之后还真的能在 telegram 上调用这个 bot 了（连反向代理都不需要了，神奇）。</p><h2 id="Bun"><a href="#Bun" class="headerlink" title="Bun"></a>Bun</h2><p>在查 dockerization 的时候，突然想到之前有人做了一个新的 node 运行时叫 <a href="//bun.sh">bun</a>，那这次我们也整个玩玩。我参考的是 <a href="//bun.sh/guides/ecosystem/docker">Containerize a Bun application with Docker</a>，开头一句</p><pre class="shiki github-light" style="background-color: #fff" tabindex="0"><code><span class="line"><span style="color: #D73A49">FROM</span><span style="color: #24292E"> oven/bun:1 </span><span style="color: #D73A49">as</span><span style="color: #24292E"> base</span></span></code></pre><p>就直接蚌埠住了。</p><p>Bun 和 TS 的相性应该也挺好的，我看得是<a href="//bun.sh/docs/typescript">这里的文档</a>。</p><p>建 Docker 的话我看的是<a href="//bun.sh/guides/ecosystem/docker">这个 guide</a>，感觉一步步挺清晰的，虽然还是没看懂哪里放 token。</p><h2 id="关于-Token"><a href="#关于-Token" class="headerlink" title="关于 Token"></a>关于 Token</h2><p><em>以下内容无特殊说明均 powered by ChatGPT</em></p><p>看来是要把 token 从 <code>process.env</code> 里面读，</p><pre class="shiki github-light" style="background-color: #fff" tabindex="0"><code><span class="line"><span style="color: #D73A49">const</span><span style="color: #24292E"> </span><span style="color: #005CC5">token</span><span style="color: #24292E"> </span><span style="color: #D73A49">=</span><span style="color: #24292E"> process.env.</span><span style="color: #005CC5">TELEGRAM_BOT_TOKEN</span><span style="color: #24292E"> </span><span style="color: #D73A49">||</span><span style="color: #24292E"> </span><span style="color: #032F62">&#39;default_token&#39;</span><span style="color: #24292E">;</span></span></code></pre><p>然后还要在 docker file 里把 .env file 拷贝过去</p><pre class="shiki github-light" style="background-color: #fff" tabindex="0"><code><span class="line"><span style="color: #D73A49">COPY</span><span style="color: #24292E"> .env .env</span></span></code></pre><p>我：但是这个不对啊！<code>.dockerignore</code> 不是把 <code>.env</code> 省略掉了吗，那这样还怎么读呢？ChatGPT 道了个歉，然后把 token 又放回到 <code>Dockerfile</code> 里去了。你妹啊！</p><p>我查了一下 docker compose 那边的文档，看来是要用 <a href="//docs.docker.com/compose/use-secrets/">secrets</a> 的方式比较好。但是我没理解错的话，docker compose 又是一个新玩意儿，所以我还得去学 Buildx 然后再去套我那个 image 什么的。好吧，又是学习新东西的一天。</p><p>同时我又想到了部署的问题（思维逐渐混乱），查了一下现在还出来一个叫 docker context 的东西（妈耶）；不过好在要素基本集齐了，我没理解错的话</p><ol><li>用 <code>docker build</code> 方法创建镜像，</li><li><code>docker compose</code> 负责把东西串起来，并且加上 secrets 的位置，</li><li><code>docker context</code> 提供远端位置并且告诉 <code>docker compose</code> 该把 <code>remote up</code> 作用在哪里。<br>参见<a href="//www.docker.com/blog/how-to-deploy-on-remote-docker-hosts-with-docker-compose/">这篇文章</a>。</li></ol><p>最后的解决方案是写了两套的 <code>.env</code> 和 <code>compose.yaml</code>，然后在调用的时候手动指定 <code>docker context</code> 和 <code>compose -f</code>。</p><h2 id="下期预告"><a href="#下期预告" class="headerlink" title="下期预告"></a>下期预告</h2><p>配置完环境之后，下一期我们就要（终于）开始<a href="/2024/01/telegram-bot-2/" title="React js、ChatGPT 和打卡 bot（二）：第一份活">写代码</a>了！</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;这次整个大新闻（&lt;/p&gt;
&lt;p&gt;最近陪 Leon 刷题找工考证什么的，需要一些自动记录打卡的小程序帮助记录和监督，顺便整个类似 Github 的打卡界面玩玩（大概就是如下图所示的玩意儿&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;//i.stack.imgur.com/V2vdR.png&quot; alt=&quot;抱歉 Bloggify/github-calendar 插件坏了只能盗个图了&quot;&gt;&lt;/p&gt;
&lt;p&gt;Anyway，先列举一下我们的需求&amp;#x2F;设想有哪些：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;支持以下项目的打卡&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Leetcode&lt;/li&gt;
&lt;li&gt;绿皮书（发送题目名字，然后做字符串匹配）&lt;/li&gt;
&lt;li&gt;面试进度追踪&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;通过 Telegram bot 接口交互，降低前端开发成本&lt;/li&gt;
&lt;li&gt;最重要的还有，基于 ChatGPT 的开发（心水很久了）&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="gizmo" scheme="https://blog.xdrd.me/categories/gizmo/"/>
    
    
    <category term="react" scheme="https://blog.xdrd.me/tags/react/"/>
    
    <category term="chatgpt" scheme="https://blog.xdrd.me/tags/chatgpt/"/>
    
    <category term="telegram" scheme="https://blog.xdrd.me/tags/telegram/"/>
    
    <category term="typescript" scheme="https://blog.xdrd.me/tags/typescript/"/>
    
    <category term="docker" scheme="https://blog.xdrd.me/tags/docker/"/>
    
    <category term="bun" scheme="https://blog.xdrd.me/tags/bun/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 站点与 Windows Powershell</title>
    <link href="https://blog.xdrd.me/2023/12/hexo-in-windows/"/>
    <id>https://blog.xdrd.me/2023/12/hexo-in-windows/</id>
    <published>2023-12-22T04:59:50.000Z</published>
    <updated>2024-01-19T16:22:32.700Z</updated>
    
    <content type="html"><![CDATA[<h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ol><li>带着小破 Thinkpad 出门的时候能无痛 ssh 到服务器上</li><li>尽量容易&#x2F;低阻力地更新博客站点页面</li></ol><span id="more"></span><h2 id="powershell-二三事"><a href="#powershell-二三事" class="headerlink" title="powershell 二三事"></a>powershell 二三事</h2><h3 id="加载时间过长"><a href="#加载时间过长" class="headerlink" title="加载时间过长"></a>加载时间过长</h3><pre class="shiki github-light" style="background-color: #fff" tabindex="0"><code><span class="line"><span style="color: #24292e">Windows PowerShell</span></span><span class="line"><span style="color: #24292e">Copyright (C) Microsoft Corporation. All rights reserved.</span></span><span class="line"><span style="color: #24292e">Install the latest PowerShell for new features and improvements! https://aka.ms/PSWindows</span></span><span class="line"><span style="color: #24292e">Loading personal and system profiles took 1454ms.</span></span></code></pre><p><del>也真好意思加载这么长时间</del></p><p>解决方案：把 <code>Documents\PowerShell\Microsoft.PowerShell_profile.ps1</code> 下面的 choco 加载代码注释了<del>（因为我已经用 choco gui 了）</del></p><pre class="shiki github-light" style="background-color: #fff" tabindex="0"><code><span class="line"><span style="color: #6A737D"># $ChocolateyProfile = &quot;$env:ChocolateyInstall\helpers\chocolateyProfile.psm1&quot;</span></span><span class="line"><span style="color: #6A737D"># if (Test-Path($ChocolateyProfile)) &#123;</span></span><span class="line"><span style="color: #6A737D">#   Import-Module &quot;$ChocolateyProfile&quot;</span></span><span class="line"><span style="color: #6A737D"># &#125;</span></span></code></pre><h3 id="handy-features"><a href="#handy-features" class="headerlink" title="handy features"></a>handy features</h3><ul><li><p>然后去 microsoft store 里下了一个 powershell 7.4<br><del>（中间思考怎么释放C盘空间去了</del></p></li><li><p>有个小插曲是 <a href="//stackoverflow.com/questions/8264655/how-to-make-powershell-tab-completion-work-like-bash">powershell 的 tab 补全</a></p><pre class="shiki github-light" style="background-color: #fff" tabindex="0"><code><span class="line"><span style="color: #005CC5">Set-PSReadlineKeyHandler</span><span style="color: #24292E"> </span><span style="color: #D73A49">-</span><span style="color: #24292E">Key Tab </span><span style="color: #D73A49">-</span><span style="color: #24292E">Function MenuComplete</span></span></code></pre><p>这样就可以像 oh-my-zsh 那样 tab 后高亮选择填充文件了</p></li><li><p>因为懒得安装vim：</p><pre class="shiki github-light" style="background-color: #fff" tabindex="0"><code><span class="line"><span style="color: #D73A49">function</span><span style="color: #24292E"> </span><span style="color: #6F42C1">vim</span><span style="color: #24292E"> &#123; </span><span style="color: #D73A49">&amp;</span><span style="color: #032F62">&quot;</span><span style="color: #24292E">$&#123;</span><span style="color: #005CC5">Env:</span><span style="color: #24292E">ProgramFiles&#125;</span><span style="color: #032F62">\Sublime Text\sublime_text.exe&quot;</span><span style="color: #24292E"> </span><span style="color: #005CC5">$args</span><span style="color: #24292E"> &#125;</span></span></code></pre></li></ul><h2 id="注册-ssh-key"><a href="#注册-ssh-key" class="headerlink" title="注册 ssh key"></a>注册 ssh key</h2><ul><li><p>折腾了半天，目前这样的 <code>.ssh/config</code> 是好使的：</p><pre class="shiki github-light" style="background-color: #fff" tabindex="0"><code><span class="line"><span style="color: #24292e">Host xdroid_server</span></span><span class="line"><span style="color: #24292e">    Hostname [host domain]</span></span><span class="line"><span style="color: #24292e">    User xdroid</span></span><span class="line"><span style="color: #24292e">#   IdentitiesOnly yes</span></span><span class="line"><span style="color: #24292e">    AddKeysToAgent yes</span></span><span class="line"><span style="color: #24292e">    IdentityFile ~\.ssh\private_key</span></span></code></pre></li><li><p>然后加了一个 windows terminal 的 profile，这样就可以一键登录到服务器上了</p></li></ul><h2 id="在-windows-下部署-hexo-环境"><a href="#在-windows-下部署-hexo-环境" class="headerlink" title="在 windows 下部署 hexo 环境"></a>在 windows 下部署 hexo 环境</h2><ol><li><p>第一步是装 npm 环境，我这里用 <a href="//pnpm.io/">pnpm</a>，还能直接下载 node 的包，很方便</p></li><li><p>然后看了一眼 hexo 已经升级到 <a href="//hexo.io/news/">7.0</a> 了（当年还是 hexo 从 2 到 3 有 api 的 breaking change），尝试 <code>hexo g</code> 编译了一下发现 <code>WARN no layout found</code>。搞了半天发现是没有 clone <a href="//github.com/owen8877/hexo-theme-bootstrap-blog">我自己的主题文件</a>，而且文件夹没有命名成是 <code>_config.yml</code> 里写的那个。</p></li><li><p>看文档的时候还发现 <code>hexo g</code> 可以加 <code>-w</code> 开关来监视文件变化，太有用了！</p></li><li><p>看了一下有类似 <a href="//github.com/wuzheng228/hexo-pro">hexo-pro</a> 之类的编辑器，不过想了想还是下次部署吧（毕竟静态文件是放 github 的资源服务器而非我自己的 vps 上的）。目前的解决方案是本地跑，当作一个好用的文本编辑器吧。</p></li></ol>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;目标&quot;&gt;&lt;a href=&quot;#目标&quot; class=&quot;headerlink&quot; title=&quot;目标&quot;&gt;&lt;/a&gt;目标&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;带着小破 Thinkpad 出门的时候能无痛 ssh 到服务器上&lt;/li&gt;
&lt;li&gt;尽量容易&amp;#x2F;低阻力地更新博客站点页面&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="Windows" scheme="https://blog.xdrd.me/categories/Windows/"/>
    
    
    <category term="ssh" scheme="https://blog.xdrd.me/tags/ssh/"/>
    
    <category term="hexo" scheme="https://blog.xdrd.me/tags/hexo/"/>
    
    <category term="powershell" scheme="https://blog.xdrd.me/tags/powershell/"/>
    
  </entry>
  
  <entry>
    <title>「日历记事本」python 版</title>
    <link href="https://blog.xdrd.me/2023/05/calendar-as-diary-py/"/>
    <id>https://blog.xdrd.me/2023/05/calendar-as-diary-py/</id>
    <published>2023-05-06T15:34:22.000Z</published>
    <updated>2024-01-19T16:31:29.360Z</updated>
    
    <content type="html"><![CDATA[<p>之前搞 <a href="/2020/05/calendar-as-diary-roadmap/" title="「日历记事本」规划">「日历记事本」规划</a> 的时候被 rust 整到死去活来，<a href="//sebsauvage.net/python/">人生苦短，我用 python</a>（</p><p>反正这次就是什么技术新我们就搞什么哈！新特性、新 idea 通通整上。</p><span id="more"></span><h2 id="一些思路"><a href="#一些思路" class="headerlink" title="一些思路"></a>一些思路</h2><h3 id="Python-环境和单元测试"><a href="#Python-环境和单元测试" class="headerlink" title="Python 环境和单元测试"></a>Python 环境和单元测试</h3><ul><li>环境创建 <code>mamba env create -f env.yml</code><ul><li>后来想起来还得在服务器上也整个 micromamba</li></ul></li><li>单元测试框架用的是 <a href="//docs.pytest.org/en/7.3.x/index.html">pytest</a>，正在学习<ul><li>tips：用 <a href="//stackoverflow.com/questions/62044541/change-pytest-working-directory-to-test-case-directory">monkeypatch</a> 可以改变测试时的 cwd，让命令行的 pytest 和 pycharm 和谐相处（很纠结要不要用这个特性）</li></ul></li><li>requests 库似乎移除了 async 特性，反正我们这小破程序也不需要 async，那就同步凑合一下吧</li><li>python 没有像 rust 那样的 typed enum，有时候写起来有点别扭；不过 rust 的 dyn box 来 mut 去的不是更恶心？</li><li>json 的 binding 靠 <a href="//xsdata.readthedocs.io/en/latest/index.html">xsdata</a> 完成了（xs？）</li><li>爬虫还是一样难搞，好在现在有能用的 debugger 了（鄙视 rust 一秒钟），解析 HTML 用了 <a href="//www.crummy.com/software/BeautifulSoup/">BeautifulSoup</a> 这个库</li><li>又遇到时区问题了……pytz 也未能避免设坑，参见 <a href="//stackoverflow.com/questions/24188060/in-pandas-why-does-tz-convert-change-the-timezone-used-from-est-to-lmt">这个帖子</a>。解决方法是用 <a href="//docs.python.org/3/library/zoneinfo.html">ZoneInfo</a> 代替 pytz.timezone。</li></ul><h3 id="自动部署"><a href="#自动部署" class="headerlink" title="自动部署"></a>自动部署</h3><p>我记得之前好像搞过 <a href="//github.com/ncarlier/webhookd">webhookd</a>，所以这次就直接拿出来用了。这样的话 Github Webhook 会把 repo 上的改动 event trigger 到服务器上，然后就能自动 pull 了。</p><ul><li>Github 设置页面里 content-type 要选 application&#x2F;json，不然我想了半天也没搞清楚为啥 script 没有传入的 $1 参数。</li><li>micromamba 还是没法完全自动化，看来包的安装升级还是要手动搞了，这点 npm 完胜</li></ul><h3 id="Google-Calendar-API"><a href="#Google-Calendar-API" class="headerlink" title="Google Calendar API"></a>Google Calendar API</h3><p>有个比较蛋疼的事情是 python 版的 api library 只能用链接的方式验证，所以很难自动化。后来想了个办法，先本地验证完之后再 scp 给远端服务器（但还是有如果 token 挂了，那么整个 debug 信息都出不来的问题……）</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;之前搞 &lt;a href=&quot;/2020/05/calendar-as-diary-roadmap/&quot; title=&quot;「日历记事本」规划&quot;&gt;「日历记事本」规划&lt;/a&gt; 的时候被 rust 整到死去活来，&lt;a href=&quot;//sebsauvage.net/python/&quot;&gt;人生苦短，我用 python&lt;/a&gt;（&lt;/p&gt;
&lt;p&gt;反正这次就是什么技术新我们就搞什么哈！新特性、新 idea 通通整上。&lt;/p&gt;</summary>
    
    
    
    <category term="gizmo" scheme="https://blog.xdrd.me/categories/gizmo/"/>
    
    
    <category term="calendar-as-diary" scheme="https://blog.xdrd.me/tags/calendar-as-diary/"/>
    
    <category term="python" scheme="https://blog.xdrd.me/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>不作死就不会死</title>
    <link href="https://blog.xdrd.me/2023/04/brick-and-unbrick/"/>
    <id>https://blog.xdrd.me/2023/04/brick-and-unbrick/</id>
    <published>2023-04-21T23:15:42.000Z</published>
    <updated>2023-04-21T23:53:06.771Z</updated>
    
    <content type="html"><![CDATA[<p>人呐，就是要充分发挥主观能动性去作死（不是</p><p>这是怎么回事呢？周四早上的时候，不知道哪根筋搭住了，偏要找找自己手上用的这块 <a href="https://www.vastking.com/products/kingpad-k10">Android 平板</a>（喏就是这个电子辣鸡）能不能升级到更新的 ROM 。稍微做了一番功课之后发现 <a href="https://developer.android.com/topic/generic-system-image/">Generic System Images</a> 这东西，而且在某个论坛上看到有人成功升级了型号相似的一个平板，我寻思这也许有戏啊？</p><span id="more"></span><p>（于是拉开了作死的序幕）</p><p>一开始用 <a href="https://developer.android.com/topic/dsu">DSU</a> 的方式更新，结果发现 adb 发送了 intent 之后岿然不动，完全不想搭理更新的样子。于是琢磨了一下 <a href="https://source.android.com/setup/build/gsi#flashing-gsis">flashing</a> 的方法；有点脑子的人看到这个说法就知道肯定是要 unlock bootloader 的，但是很不幸呢这个平板太小众了查不到资料。</p><p>（补充一下：这个厂商把 <code>fastboot oem unlock</code> 直接封杀了）</p><p>好在天无绝人之路，误打误撞找到了这么个神奇的<a href="https://www.hovatek.com/forum/thread-32287.html">论坛</a>，这个帖子里直接给了破解 bootloader lock 的方法。于是我兴高采烈地照做了之后果然顺利解开了（好像一切都还挺顺利的）。</p><p>这一路上还学到了不少新东西，比如 fastboot 现在有一部分和 recovery 合并了（相当于进入了用户空间），老版 fastboot 专门管 bootloader（后来发现是个大坑）。我照着官方 GSI 的刷入教程一步步做，没想到卡在了 erase 那一步：</p><pre class="shiki github-light" style="background-color: #fff" tabindex="0"><code><span class="line"><span style="color: #6F42C1">$</span><span style="color: #24292E"> </span><span style="color: #032F62">fastboot</span><span style="color: #24292E"> </span><span style="color: #032F62">erase</span><span style="color: #24292E"> </span><span style="color: #032F62">system</span></span><span class="line"><span style="color: #6F42C1">FAILED:</span><span style="color: #24292E"> </span><span style="color: #032F62">...</span></span></code></pre><p>这是什么情况？左思右想搞不明白。</p><p>Anyway，似乎不太重要。刷 system 的时候还说空间不够，查了一下才知道是现在 system 变成逻辑分区了，左邻右舍还有 product 和 vendor。把 system.img 刷进去之后还要清 userdata，也没法直接搞，想了想 <code>format:f2fs</code> 了。之后就重启系统，然后是漫长的等待……</p><p>……</p><p>……（搁这读条呢？</p><p>……（老子不干了！</p><p>很明显卡在 boot splash 了（后来 lineageos 镜像的话是看圆圈圈转来转去）。试了很多镜像都没啥用，还好找到了 <a href="https://mega.nz/folder/TepnWZ5Z#Ftyr0HkCMS-Z4JS_kGLwpA">stock image</a> 能刷回来（这个时候还是乐观的太早了）。</p><p>那我寻思不能升级系统的话，搞个 magisk 应该不过分吧？去看了一下现在 magisk 的文档，发现已经不推荐 recovery 刷入了，要自己提取 boot.img。好在之前刷入原版镜像的时候，误打误撞搞到了 recovery&#x2F;boot.img（应该是那个大的 pac 里提取出来的）。喂给 magisk 打包，然后 fastboot 刷入，再重启……</p><p>又卡住了？？什么，这次直接显示 <code>INFO: LOCK STATUS UNLOCK!!</code> 就没下文了？而且也没法关机，重启还是显示这句话。试了几次无果，有种不好的预感可能要交代了。晚上睡了一觉，就把 pad 放在一边想着耗电自动关机算了，结果早上起来一看还是精神满满。甚至都查到了<a href="https://www.hovatek.com/forum/thread-808.html">教怎么用 LED 灯泡放电的帖子</a>，感觉大事不妙。</p><p>好在之前蛛丝马迹指向一个叫 <a href="https://mega.nz/file/8lZzECZL#5lWkfej5E9muRDQRP0jxFRwe8IjkrUwfHt043ZFHy4A">ResearchDownloadTool</a> 的东西。由于 MTK 和 Unisoc 都是整平台方案，所以有这种可以刷入的工具。进下载模式是音量下键+开机键，试了很多次才掌握门道。第一次把 boot 刷回去的时候真的是喜极而泣，不然家里真的要多电子辣鸡了。</p><p>在和 magisk 拉扯几次后，我终于放弃了安装 magisk 的想法。那么剩下的任务就是恢复 pad 之前的功能……等等，wifi 怎么彻底挂了？之前有过 wifi 莫名其妙卡住的情况，按一种特定的方式重启就能修好，但是这次……好像怎么玄学都没用。无奈只能上网搜能不能反向 tether；还真被我找到了，<a href="https://android.stackexchange.com/questions/171744/how-can-i-enable-usb-tethering-through-adb">windows 下</a>和 <a href="https://github.com/Genymobile/gnirehtet">linux 下</a>还有不同的方案。本以为就搞此一段落了，结果发现 wifi TMD 自己好了！好了！真气人（下播</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;人呐，就是要充分发挥主观能动性去作死（不是&lt;/p&gt;
&lt;p&gt;这是怎么回事呢？周四早上的时候，不知道哪根筋搭住了，偏要找找自己手上用的这块 &lt;a href=&quot;https://www.vastking.com/products/kingpad-k10&quot;&gt;Android 平板&lt;/a&gt;（喏就是这个电子辣鸡）能不能升级到更新的 ROM 。稍微做了一番功课之后发现 &lt;a href=&quot;https://developer.android.com/topic/generic-system-image/&quot;&gt;Generic System Images&lt;/a&gt; 这东西，而且在某个论坛上看到有人成功升级了型号相似的一个平板，我寻思这也许有戏啊？&lt;/p&gt;</summary>
    
    
    
    <category term="phone" scheme="https://blog.xdrd.me/categories/phone/"/>
    
    
    <category term="android" scheme="https://blog.xdrd.me/tags/android/"/>
    
    <category term="fastboot" scheme="https://blog.xdrd.me/tags/fastboot/"/>
    
    <category term="magisk" scheme="https://blog.xdrd.me/tags/magisk/"/>
    
  </entry>
  
  <entry>
    <title>rust 测试环境看不到输出内容</title>
    <link href="https://blog.xdrd.me/2022/10/rust-test-output/"/>
    <id>https://blog.xdrd.me/2022/10/rust-test-output/</id>
    <published>2022-10-07T21:15:05.000Z</published>
    <updated>2022-10-07T21:21:30.039Z</updated>
    
    <content type="html"><![CDATA[<p>我们长话短说（因为实在是太蠢了），先上解决方案：<a href="https://stackoverflow.com/questions/25106554/why-doesnt-println-work-in-rust-unit-tests">Why doesn’t println! work in Rust unit tests? - Stack Overflow</a>（这个感叹号很灵性，不了解 rust 的可能还以为是个暴躁老歌）</p><p>简单来说就是我在修补之前写的日历自动化工具 <a href="/2020/05/calendar-as-diary-roadmap/" title="「日历记事本」规划">「日历记事本」规划</a>，结果发现死活打印不出 interactive oauth 的输出。本来还以为是 async 或者 oauth 啥的问题，结果后来发现连 <code>println!</code> 都打印不出东西了，感觉有点问题。这个 feature 也是特别奇怪，可能是某次升级加进去的吧。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;我们长话短说（因为实在是太蠢了），先上解决方案：&lt;a href=&quot;https://stackoverflow.com/questions/25106554/why-doesnt-println-work-in-rust-unit-tests&quot;&gt;Why doesn’t pri</summary>
      
    
    
    
    <category term="coding" scheme="https://blog.xdrd.me/categories/coding/"/>
    
    
    <category term="rust" scheme="https://blog.xdrd.me/tags/rust/"/>
    
    <category term="idea" scheme="https://blog.xdrd.me/tags/idea/"/>
    
  </entry>
  
  <entry>
    <title>修复 matlab 的 freetype 库</title>
    <link href="https://blog.xdrd.me/2022/10/matlab-installer/"/>
    <id>https://blog.xdrd.me/2022/10/matlab-installer/</id>
    <published>2022-10-02T18:32:05.000Z</published>
    <updated>2022-10-02T18:48:03.482Z</updated>
    
    <content type="html"><![CDATA[<p>安装 matlab 2022b<del>（其实之前的版本也有问题）</del>时有如下报错：</p><pre class="shiki github-light" style="background-color: #fff" tabindex="0"><code><span class="line"><span style="color: #24292e">terminate called after throwing an instance of &#39;std::runtime_error&#39;</span></span><span class="line"><span style="color: #24292e">  what():  Failed to launch web window with error: Unable to launch the MATLABWindow application. The exit code was: 127</span></span><span class="line"><span style="color: #24292e">[1]    20338 IOT instruction (core dumped)  ./install</span></span></code></pre><p>经过 google 发现是<a href="https://www.reddit.com/r/archlinux/comments/tkas9q/matlab_stopped_working_after_system_update/">内嵌的 freetype 库有问题</a>，把 <code>libfreetype.so.6</code> 链接挪走就行。</p><hr><p>同理适用于安装后 <a href="https://www.mathworks.com/matlabcentral/answers/1779395-the-desktop-configuration-file-is-corrupt-or-improperly-formatted-when-starting-matlab">matlab 抽风</a>：</p><pre class="shiki github-light" style="background-color: #fff" tabindex="0"><code><span class="line"><span style="color: #24292e">Warning: The desktop configuration file is corrupt or improperly formatted.</span></span><span class="line"><span style="color: #24292e">null</span></span><span class="line"><span style="color: #24292e">Warning: An error occurred while reading the desktop configuration file.</span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;安装 matlab 2022b&lt;del&gt;（其实之前的版本也有问题）&lt;/del&gt;时有如下报错：&lt;/p&gt;
&lt;pre class=&quot;shiki github-light&quot; style=&quot;background-color: #fff&quot; tabindex=&quot;0&quot;&gt;&lt;code&gt;&lt;spa</summary>
      
    
    
    
    <category term="linux" scheme="https://blog.xdrd.me/categories/linux/"/>
    
    
    <category term="matlab" scheme="https://blog.xdrd.me/tags/matlab/"/>
    
    <category term="freetype" scheme="https://blog.xdrd.me/tags/freetype/"/>
    
  </entry>
  
  <entry>
    <title>感谢大葱刷的 GTX 1080！</title>
    <link href="https://blog.xdrd.me/2022/09/gtx1080/"/>
    <id>https://blog.xdrd.me/2022/09/gtx1080/</id>
    <published>2022-09-04T22:41:23.000Z</published>
    <updated>2022-09-15T15:20:56.314Z</updated>
    
    <content type="html"><![CDATA[<p>老年人的标志就是换了 GTX 1080 这种事都懒得写一篇博文了（</p><span id="more"></span><h2 id="多显示器配置"><a href="#多显示器配置" class="headerlink" title="多显示器配置"></a>多显示器配置</h2><p><a href="https://christian.amsuess.com/tools/arandr/">ARandR: Another XRandR GUI</a> 配合 i3wm 自启动脚本</p><h2 id="画面撕裂"><a href="#画面撕裂" class="headerlink" title="画面撕裂"></a>画面撕裂</h2><ul><li>关闭 compton</li><li>每块屏幕设置 <code>ForceCompositionPipeline</code></li><li>参见 <a href="https://techknowfile.dev/how-to-fix-screen-tearing-on-i3-wm-ubuntu-18-04/">How to fix screen tearing on i3-wm (Ubuntu 18.04) - Techknowfile</a></li></ul><h2 id="Cuda-Pytorch"><a href="#Cuda-Pytorch" class="headerlink" title="Cuda, Pytorch"></a>Cuda, Pytorch</h2><ul><li><a href="https://pytorch.org/get-started/locally/">Start Locally | Pytorch</a></li><li><code>yay -S cuda</code></li><li><code>conda env create -f environment.yml</code> where <code>cat environment.yml</code><pre class="shiki github-light" style="background-color: #fff" tabindex="0"><code><span class="line"><span style="color: #24292e">name: cuda116env</span></span><span class="line"><span style="color: #24292e">channels:</span></span><span class="line"><span style="color: #24292e">  - pytorch</span></span><span class="line"><span style="color: #24292e">  - conda-forge</span></span><span class="line"><span style="color: #24292e">dependencies:</span></span><span class="line"><span style="color: #24292e">  - cudatoolkit=11.6</span></span><span class="line"><span style="color: #24292e">  - pytorch</span></span><span class="line"><span style="color: #24292e">  - numpy</span></span><span class="line"><span style="color: #24292e">  - scipy</span></span><span class="line"><span style="color: #24292e">  - tqdm</span></span><span class="line"><span style="color: #24292e">  - opt_einsum</span></span><span class="line"><span style="color: #24292e">  - numba</span></span><span class="line"><span style="color: #24292e">  - matplotlib</span></span></code></pre></li><li>注意：<code>cudatoolkit</code> 必须和 <code>pytorch</code> 包的要求对应，不然会装上 <code>cpuonly</code></li></ul><h2 id="cuda"><a href="#cuda" class="headerlink" title=".cuda()"></a><code>.cuda()</code></h2><p>写代码的时候需要注意如下几点：</p><ul><li>用 <code>.cuda()</code> 和 <code>.cpu()</code> 迁移 tensor 的位置</li><li><a href="https://pytorch.org/tutorials/recipes/recipes/profiler_recipe.html">PyTorch Profiler</a> 配合 chrome tracing 食用</li><li>optimizer 为何占用很多 cpu 时间？因为还是在 cpu 上跑的动态图</li><li>解决方案：用 cuda graph 记录 gpu 上要跑的计算图 + optimizer 设为 <code>capturable=True</code>，见<a href="https://pytorch.org/blog/accelerating-pytorch-with-cuda-graphs/">此</a>，配置正确后 profile 里应该只看见很少的 sync 和 launch graph。</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;老年人的标志就是换了 GTX 1080 这种事都懒得写一篇博文了（&lt;/p&gt;</summary>
    
    
    
    <category term="pytorch" scheme="https://blog.xdrd.me/categories/pytorch/"/>
    
    
    <category term="gtx 1080" scheme="https://blog.xdrd.me/tags/gtx-1080/"/>
    
    <category term="pytorch" scheme="https://blog.xdrd.me/tags/pytorch/"/>
    
    <category term="deep learning" scheme="https://blog.xdrd.me/tags/deep-learning/"/>
    
    <category term="cuda" scheme="https://blog.xdrd.me/tags/cuda/"/>
    
  </entry>
  
  <entry>
    <title>蓝牙鼠标双系统连接</title>
    <link href="https://blog.xdrd.me/2022/04/dual-pair/"/>
    <id>https://blog.xdrd.me/2022/04/dual-pair/</id>
    <published>2022-04-04T23:05:09.000Z</published>
    <updated>2022-04-04T23:12:44.771Z</updated>
    
    <content type="html"><![CDATA[<p>存档向 <del>怎么会有我这种自作聪明的人</del></p><span id="more"></span><p>正确的<a href="https://gist.github.com/tVienonen/fad5cb68e6449f6c4804e276094516e3">做法</a></p><hr><p>我之前参考 arch wiki，里面没有提到 CSRK（坑啊）。但其实更加坑的是 windows 导出的注册表文件里大小端是不一致的。</p><p>具体的对应顺序如下：</p><ul><li>LTK&#x3D;LongTermKey：<strong>同序</strong></li><li>CSRK&#x3D;LocalSignatureKey：<strong>同序</strong></li><li>IRK&#x3D;IdentityResolvingKey：<strong>逆序</strong></li><li>mac地址：逆序（但是标了<code>hex(b)</code>所以也不意外）</li><li>EDiv：同序转换</li><li>ERand：逆序转换</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;存档向 &lt;del&gt;怎么会有我这种自作聪明的人&lt;/del&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="nagging" scheme="https://blog.xdrd.me/categories/nagging/"/>
    
    
    <category term="bluetooth" scheme="https://blog.xdrd.me/tags/bluetooth/"/>
    
  </entry>
  
  <entry>
    <title>尝试一下 Miniflux</title>
    <link href="https://blog.xdrd.me/2022/03/trying-miniflux/"/>
    <id>https://blog.xdrd.me/2022/03/trying-miniflux/</id>
    <published>2022-03-26T01:50:30.000Z</published>
    <updated>2022-03-26T02:14:10.997Z</updated>
    
    <content type="html"><![CDATA[<p>Inoreader 好辣鸡，我博客的 rss 插件输出对的，但是不知道为啥时间全都变成最后一次更新时间……</p><p>试一下 Miniflux，看起来是一个开源的（颜值还行）的 rss server + client。</p><p>安装见<a href="https://miniflux.app/docs/installation.html">这里</a>。这边配置 postgreSQL 有点坑，见<a href="https://stackoverflow.com/questions/7695962/password-authentication-failed-for-user-postgres">这篇</a>。配置完之后正常设 nginx 反向代理和 let’s encrypt 证书。</p><p>试了一下感觉非常不错，就是有些极简过头了。一个第三方客户端居然连历史回看都不支持（不过好像确实没有支持的必要……）。</p><p>插件方面<a href="https://www.jamesfmackenzie.com/getting-started-with-the-pocket-developer-api/">连接了 pocket</a>，方便一键进收藏夹（吃灰）。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Inoreader 好辣鸡，我博客的 rss 插件输出对的，但是不知道为啥时间全都变成最后一次更新时间……&lt;/p&gt;
&lt;p&gt;试一下 Miniflux，看起来是一个开源的（颜值还行）的 rss server + client。&lt;/p&gt;
&lt;p&gt;安装见&lt;a href=&quot;https:</summary>
      
    
    
    
    <category term="gizmo" scheme="https://blog.xdrd.me/categories/gizmo/"/>
    
    
    <category term="miniflux" scheme="https://blog.xdrd.me/tags/miniflux/"/>
    
    <category term="rss" scheme="https://blog.xdrd.me/tags/rss/"/>
    
  </entry>
  
  <entry>
    <title>Pytorch 自定义网络类的参数</title>
    <link href="https://blog.xdrd.me/2022/03/pytorch-register-parameter/"/>
    <id>https://blog.xdrd.me/2022/03/pytorch-register-parameter/</id>
    <published>2022-03-07T17:05:58.000Z</published>
    <updated>2022-03-07T17:39:48.483Z</updated>
    
    <content type="html"><![CDATA[<p><del>真的是要被自己蠢哭了</del></p><p>事情是这样的，最近在用deep learning的方法解pde，然后代码写到了保存和读取网络参数的部分，发现载入参数后的网络会生成和训练时不一样的结果；更令人奇怪的是这个结果每次运行都不一样。</p><span id="more"></span><p>比如说训练完保存前网络输出长这样：<br><img src="/images/2022-03-pytorch-register-parameter/sobel_u1.jpg" alt="应该长这样"><br>通过读取保存的参数文件重建后的输出长这样：<br><img src="/images/2022-03-pytorch-register-parameter/load_random.png" alt="结果长这样了"><br>呃……我寻思好像也没有dropoff和其他随机的layer啊，而且也设置了<code>model.eval()</code>。上网搜了一些论坛后觉得可能是参数保存的问题……？</p><p>先来看一下我自己写的resnet实现：</p><pre class="shiki github-light" style="background-color: #fff" tabindex="0"><code><span class="line"><span style="color: #D73A49">class</span><span style="color: #24292E"> </span><span style="color: #6F42C1">ResNet</span><span style="color: #24292E">(</span><span style="color: #6F42C1">nn</span><span style="color: #24292E">.</span><span style="color: #6F42C1">Module</span><span style="color: #24292E">):</span></span><span class="line"><span style="color: #24292E">    </span><span style="color: #D73A49">def</span><span style="color: #24292E"> </span><span style="color: #005CC5">__init__</span><span style="color: #24292E">(self, d, m, activation</span><span style="color: #D73A49">=</span><span style="color: #032F62">&quot;elu&quot;</span><span style="color: #24292E">, groups</span><span style="color: #D73A49">=</span><span style="color: #005CC5">2</span><span style="color: #24292E">):</span></span><span class="line"><span style="color: #24292E">        </span><span style="color: #005CC5">super</span><span style="color: #24292E">(ResNet, </span><span style="color: #005CC5">self</span><span style="color: #24292E">).</span><span style="color: #005CC5">__init__</span><span style="color: #24292E">()</span></span><span class="line"><span style="color: #24292E">        </span><span style="color: #005CC5">self</span><span style="color: #24292E">.d </span><span style="color: #D73A49">=</span><span style="color: #24292E"> d</span></span><span class="line"><span style="color: #24292E">        </span><span style="color: #005CC5">self</span><span style="color: #24292E">.m </span><span style="color: #D73A49">=</span><span style="color: #24292E"> m</span></span><span class="line"></span><span class="line"><span style="color: #24292E">        </span><span style="color: #005CC5">self</span><span style="color: #24292E">.preprocess </span><span style="color: #D73A49">=</span><span style="color: #24292E"> nn.Linear(d, m)</span></span><span class="line"></span><span class="line"><span style="color: #24292E">        </span><span style="color: #005CC5">self</span><span style="color: #24292E">.groups </span><span style="color: #D73A49">=</span><span style="color: #24292E"> groups</span></span><span class="line"><span style="color: #24292E">        </span><span style="color: #005CC5">self</span><span style="color: #24292E">.block_per_group </span><span style="color: #D73A49">=</span><span style="color: #24292E"> </span><span style="color: #005CC5">2</span></span><span class="line"></span><span class="line"><span style="color: #24292E">        </span><span style="color: #005CC5">self</span><span style="color: #24292E">.res_fcs </span><span style="color: #D73A49">=</span><span style="color: #24292E"> [[nn.Linear(m, m) </span><span style="color: #D73A49">for</span><span style="color: #24292E"> _ </span><span style="color: #D73A49">in</span><span style="color: #24292E"> </span><span style="color: #005CC5">range</span><span style="color: #24292E">(</span><span style="color: #005CC5">self</span><span style="color: #24292E">.block_per_group)] </span><span style="color: #D73A49">for</span><span style="color: #24292E"> _ </span><span style="color: #D73A49">in</span><span style="color: #24292E"> </span><span style="color: #005CC5">range</span><span style="color: #24292E">(</span><span style="color: #005CC5">self</span><span style="color: #24292E">.groups)]</span></span><span class="line"></span><span class="line"><span style="color: #24292E">        </span><span style="color: #005CC5">self</span><span style="color: #24292E">.fc </span><span style="color: #D73A49">=</span><span style="color: #24292E"> nn.Linear(m, </span><span style="color: #005CC5">1</span><span style="color: #24292E">)</span></span><span class="line"><span style="color: #24292E">        </span><span style="color: #D73A49">if</span><span style="color: #24292E"> activation </span><span style="color: #D73A49">==</span><span style="color: #24292E"> </span><span style="color: #032F62">&quot;relu&quot;</span><span style="color: #24292E">:</span></span><span class="line"><span style="color: #24292E">            </span><span style="color: #005CC5">self</span><span style="color: #24292E">.activation </span><span style="color: #D73A49">=</span><span style="color: #24292E"> </span><span style="color: #D73A49">lambda</span><span style="color: #24292E"> x: Func.relu(x)</span></span><span class="line"><span style="color: #24292E">        </span><span style="color: #6A737D">#...</span></span><span class="line"></span><span class="line"><span style="color: #24292E">    </span><span style="color: #D73A49">def</span><span style="color: #24292E"> </span><span style="color: #6F42C1">forward</span><span style="color: #24292E">(self, x):</span></span><span class="line"><span style="color: #24292E">        z </span><span style="color: #D73A49">=</span><span style="color: #24292E"> </span><span style="color: #005CC5">self</span><span style="color: #24292E">.preprocess(x)</span></span><span class="line"><span style="color: #24292E">        </span><span style="color: #D73A49">for</span><span style="color: #24292E"> group </span><span style="color: #D73A49">in</span><span style="color: #24292E"> </span><span style="color: #005CC5">self</span><span style="color: #24292E">.res_fcs:</span></span><span class="line"><span style="color: #24292E">            z_id </span><span style="color: #D73A49">=</span><span style="color: #24292E"> z</span></span><span class="line"><span style="color: #24292E">            </span><span style="color: #D73A49">for</span><span style="color: #24292E"> block </span><span style="color: #D73A49">in</span><span style="color: #24292E"> group:</span></span><span class="line"><span style="color: #24292E">                z </span><span style="color: #D73A49">=</span><span style="color: #24292E"> </span><span style="color: #005CC5">self</span><span style="color: #24292E">.activation(block(z))</span></span><span class="line"><span style="color: #24292E">            z </span><span style="color: #D73A49">=</span><span style="color: #24292E"> z_id </span><span style="color: #D73A49">+</span><span style="color: #24292E"> z</span></span><span class="line"><span style="color: #24292E">        </span><span style="color: #D73A49">return</span><span style="color: #24292E"> </span><span style="color: #005CC5">self</span><span style="color: #24292E">.fc(z)</span></span></code></pre><p>是不是感觉特别优雅？写完还觉得这样就不用手写跳接层，多方便呀。结果看了一眼<code>model.state_dict()</code>：</p><pre class="shiki github-light" style="background-color: #fff" tabindex="0"><code><span class="line"><span style="color: #24292e">&gt;&gt;&gt; model.state_dict()</span></span><span class="line"><span style="color: #24292e">OrderedDict([(&#39;preprocess.weight&#39;, tensor(...)), (&#39;preprocess.bias&#39;, tensor(...)), (&#39;fc.weight&#39;, tensor(...)), (&#39;fc.bias&#39;, tensor(...))])</span></span></code></pre><p>我去……整个人都傻了……也就是说只有<code>preprocess</code>和<code>fc</code>这两个layer是别识别成可训练&#x2F;可保存的，其它的都被无视了。</p><p>想想好像也有道理……毕竟<code>res_fcs</code>是一个list，长的不像layer。解决办法感觉是用<code>ModuleList</code>（<a href="https://pytorch.org/docs/stable/generated/torch.nn.ModuleList.html">文档</a>）（不用自己造轮子了开心）。修改后的代码如下：</p><pre class="shiki github-light" style="background-color: #fff" tabindex="0"><code><span class="line"><span style="color: #005CC5">self</span><span style="color: #24292E">.res_fcs </span><span style="color: #D73A49">=</span><span style="color: #24292E"> nn.ModuleList([nn.ModuleList([nn.Linear(m, m) </span><span style="color: #D73A49">for</span><span style="color: #24292E"> _ </span><span style="color: #D73A49">in</span><span style="color: #24292E"> </span><span style="color: #005CC5">range</span><span style="color: #24292E">(</span><span style="color: #005CC5">self</span><span style="color: #24292E">.block_per_group)]) </span><span style="color: #D73A49">for</span><span style="color: #24292E"> _ </span><span style="color: #D73A49">in</span><span style="color: #24292E"> </span><span style="color: #005CC5">range</span><span style="color: #24292E">(</span><span style="color: #005CC5">self</span><span style="color: #24292E">.groups)])</span></span></code></pre>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;del&gt;真的是要被自己蠢哭了&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;事情是这样的，最近在用deep learning的方法解pde，然后代码写到了保存和读取网络参数的部分，发现载入参数后的网络会生成和训练时不一样的结果；更令人奇怪的是这个结果每次运行都不一样。&lt;/p&gt;</summary>
    
    
    
    <category term="coding" scheme="https://blog.xdrd.me/categories/coding/"/>
    
    
    <category term="pytorch" scheme="https://blog.xdrd.me/tags/pytorch/"/>
    
    <category term="state_dict" scheme="https://blog.xdrd.me/tags/state-dict/"/>
    
    <category term="resnet" scheme="https://blog.xdrd.me/tags/resnet/"/>
    
  </entry>
  
  <entry>
    <title>Matlab造成的死机？！</title>
    <link href="https://blog.xdrd.me/2022/02/matlab-panic/"/>
    <id>https://blog.xdrd.me/2022/02/matlab-panic/</id>
    <published>2022-03-01T03:12:35.000Z</published>
    <updated>2022-03-01T04:23:38.033Z</updated>
    
    <content type="html"><![CDATA[<p>最近遇到一个非常奇怪的事情，本来好好的写作业，需要跑一个matlab代码，结果跑了一小会儿直接黑屏了。我一开始以为是内存爆了，就把测试矩阵的大小改小了一点，结果还是崩，而且崩的时候是鼠标键盘统统没反应，只能按电源键。失败几次之后决定从日志里找找原因。</p><span id="more"></span><p>让我们康康 <code>journalctl --since=today</code> 里都有啥：</p><pre class="shiki github-light" style="background-color: #fff" tabindex="0"><code><span class="line"><span style="color: #24292e">Feb 28 18:37:30 xDroid-Arch26X MATLAB[4591]: Failed to load module &quot;canberra-gtk-module&quot;</span></span><span class="line"><span style="color: #24292e">Feb 28 18:37:50 xDroid-Arch26X kernel: pcieport 0000:03:01.0: can&#39;t change power state from D3cold to D0 (config space inacce&gt;</span></span><span class="line"><span style="color: #24292e">Feb 28 18:37:51 xDroid-Arch26X kernel: xhci_hcd 0000:02:00.0: xHCI host controller not responding, assume dead</span></span><span class="line"><span style="color: #24292e">Feb 28 18:37:51 xDroid-Arch26X kernel: xhci_hcd 0000:02:00.0: HC died; cleaning up</span></span><span class="line"><span style="color: #24292e">Feb 28 18:37:51 xDroid-Arch26X kernel: usb 1-5: USB disconnect, device number 2</span></span><span class="line"><span style="color: #24292e">Feb 28 18:37:52 xDroid-Arch26X /usr/lib/gdm-x-session[1305]: (II) event16 - DELL Alienware 310K: device removed</span></span></code></pre><p>下面是一些设备（键鼠）被断开，然后是</p><pre class="shiki github-light" style="background-color: #fff" tabindex="0"><code><span class="line"><span style="color: #24292e">Feb 28 18:37:53 xDroid-Arch26X kernel: iwlwifi 0000:06:00.0: Error sending CMD_DTS_MEASUREMENT_TRIGGER_WIDE: time out after 2&gt;</span></span><span class="line"><span style="color: #24292e">Feb 28 18:37:53 xDroid-Arch26X kernel: iwlwifi 0000:06:00.0: Current CMD queue read_ptr 91 write_ptr 92</span></span><span class="line"><span style="color: #24292e">Feb 28 18:37:53 xDroid-Arch26X kernel: ------------[ cut here ]------------</span></span><span class="line"><span style="color: #24292e">Feb 28 18:37:53 xDroid-Arch26X kernel: Timeout waiting for hardware access (CSR_GP_CNTRL 0xffffffff)</span></span><span class="line"><span style="color: #24292e">Feb 28 18:37:53 xDroid-Arch26X kernel: WARNING: CPU: 5 PID: 5784 at drivers/net/wireless/intel/iwlwifi/pcie/trans.c:2084 __iw&gt;</span></span><span class="line"><span style="color: #24292e">Fe</span></span></code></pre><p>然后无线网卡看起来也跟着炸了。</p><p>emm我们还是先从出事的<code>03:01.0</code>看起来吧。<code>lspci -vt</code>显示的设备如下：</p><pre class="shiki github-light" style="background-color: #fff" tabindex="0"><code><span class="line"><span style="color: #24292e">-[0000:00]-+-00.0  Advanced Micro Devices, Inc. [AMD] Family 17h (Models 00h-0fh) Root Complex</span></span><span class="line"><span style="color: #24292e">           +-01.0  Advanced Micro Devices, Inc. [AMD] Family 17h (Models 00h-1fh) PCIe Dummy Host Bridge</span></span><span class="line"><span style="color: #24292e">           +-01.1-[01]----00.0  Samsung Electronics Co Ltd NVMe SSD Controller SM981/PM981/PM983</span></span><span class="line"><span style="color: #24292e">           +-01.3-[02-06]--+-00.0  Advanced Micro Devices, Inc. [AMD] 400 Series Chipset USB 3.1 XHCI Controller</span></span><span class="line"><span style="color: #24292e">           |               +-00.1  Advanced Micro Devices, Inc. [AMD] 400 Series Chipset SATA Controller</span></span><span class="line"><span style="color: #24292e">           |               \-00.2-[03-06]--+-00.0-[04]----00.0  Realtek Semiconductor Co., Ltd. RTL8111/8168/8411 PCI Express Gigabit Ethernet Controller</span></span><span class="line"><span style="color: #24292e">           |                               +-01.0-[05]--</span></span><span class="line"><span style="color: #24292e">           |                               \-04.0-[06]----00.0  Intel Corporation Wireless 8265 / 8275</span></span><span class="line"><span style="color: #24292e">           +-03.0  Advanced Micro Devices, Inc. [AMD] Family 17h (Models 00h-1fh) PCIe Dummy Host Bridge</span></span><span class="line"><span style="color: #24292e">           +-03.1-[07]--+-00.0  Advanced Micro Devices, Inc. [AMD/ATI] Ellesmere [Radeon RX 470/480/570/570X/580/580X/590]</span></span><span class="line"><span style="color: #24292e">           |            \-00.1  Advanced Micro Devices, Inc. [AMD/ATI] Ellesmere HDMI Audio [Radeon RX 470/480 / 570/580/590]</span></span></code></pre><p>好家伙，我啥也没看懂——稍微翻了点资料大概明白了方括号里是实际连接的设备，从01开始编号，那么03的话应该是连着04-06的……主控？上面也没标出来啊（捂脸</p><p>anyway用<code>lspci -v -s 03:01.0</code>看看吧：</p><pre class="shiki github-light" style="background-color: #fff" tabindex="0"><code><span class="line"><span style="color: #24292e">03:01.0 PCI bridge: Advanced Micro Devices, Inc. [AMD] 400 Series Chipset PCIe Port (rev 01) (prog-if 00 [Normal decode])</span></span><span class="line"><span style="color: #24292e">Flags: bus master, fast devsel, latency 0, IRQ 36, IOMMU group 0</span></span><span class="line"><span style="color: #24292e">Bus: primary=03, secondary=05, subordinate=05, sec-latency=0</span></span></code></pre><p>好像就还真是一个主控……那也没啥信息啊。</p><p>上网搜了一圈，发现有一些非常离谱的<a href="https://bbs.archlinux.org/viewtopic.php?id=236536">方案</a>（好像是定时重启usb主控）……感觉也不是很靠谱</p><p>想了想是不是matlab自己的锅，就卸载重装了一次（其实还更新到了2021b），但是然并卵。最后误打误撞发现是dropbox的锅，matlab在写入图表epsc的文件的时候和dropbox的同步机制撞车了[允悲]，也算是大开眼界。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近遇到一个非常奇怪的事情，本来好好的写作业，需要跑一个matlab代码，结果跑了一小会儿直接黑屏了。我一开始以为是内存爆了，就把测试矩阵的大小改小了一点，结果还是崩，而且崩的时候是鼠标键盘统统没反应，只能按电源键。失败几次之后决定从日志里找找原因。&lt;/p&gt;</summary>
    
    
    
    <category term="Linux" scheme="https://blog.xdrd.me/categories/Linux/"/>
    
    
    <category term="matlab" scheme="https://blog.xdrd.me/tags/matlab/"/>
    
    <category term="dropbox" scheme="https://blog.xdrd.me/tags/dropbox/"/>
    
  </entry>
  
  <entry>
    <title>将可掀桌的黑白棋移植到 Wasm ！（持续更新）</title>
    <link href="https://blog.xdrd.me/2021/01/porting-othello-to-wasm/"/>
    <id>https://blog.xdrd.me/2021/01/porting-othello-to-wasm/</id>
    <published>2021-01-04T17:05:59.000Z</published>
    <updated>2021-01-10T23:56:00.483Z</updated>
    
    <content type="html"><![CDATA[<p>刚上大学的时候，我写了 <a href="//github.com/owen8877/Othello/blob/master/report.md">owen8877&#x2F;Othello</a> 作为我编程课的大作业。最近，当我想把它展示给其他人看的时候，却遇到了编译和链接上的困难，更别说大部分人没有 linux 环境了。想到移植到 Wasm 上应该是给不错的主意，那么这篇文章就梳理一下整体的流程和遇到的困难吧！</p><p>发布请移步至 <a href="//othello.xdroid.workers.dev/">这里</a> 。</p><span id="more"></span><h2 id="配环境和-Smoke-Test"><a href="#配环境和-Smoke-Test" class="headerlink" title="配环境和 Smoke Test"></a>配环境和 Smoke Test</h2><p>照官方教程</p><ul><li><a href="//developer.mozilla.org/en-US/docs/WebAssembly/C_to_wasm">Compiling a New C&#x2F;C++ Module to WebAssembly</a></li><li><a href="//developer.mozilla.org/en-US/docs/WebAssembly/existing_C_to_wasm">Compiling an Existing C Module to WebAssembly</a></li></ul><p>我们首先安装了 emsdk，然后编译一个 <code>hello.cpp</code> 看看能不能通过（这里还要用一步 <code>screen python3 -m http.server</code> 去加载本地的 wasm 文件）。</p><h2 id="What-about-OpenGL-and-FreeGLUT"><a href="#What-about-OpenGL-and-FreeGLUT" class="headerlink" title="What about OpenGL and FreeGLUT?"></a>What about OpenGL and FreeGLUT?</h2><p>嗯好问题！其实 emscripten 是支持 FreeGLUT 的，想不到吧！</p><p>但是支持就支持完整一些啊！为什么 <a href="//github.com/emscripten-core/emscripten/blob/4aba43b520aec5c648a8f05e5434471fd563e3e9/system/include/GL/freeglut_std.h#L514">不能画圆柱</a> 啊！（明明茶杯都可以画</p><pre class="shiki github-light" style="background-color: #fff" tabindex="0"><code><span class="line"><span style="color: #6A737D">/*</span></span><span class="line"><span style="color: #6A737D"> * Geometry functions, see freeglut_geometry.c</span></span><span class="line"><span style="color: #6A737D"> */</span></span><span class="line"><span style="color: #24292E">FGAPI </span><span style="color: #D73A49">void</span><span style="color: #24292E">    FGAPIENTRY </span><span style="color: #6F42C1">glutWireCube</span><span style="color: #24292E">( GLdouble size );</span></span><span class="line"><span style="color: #24292E">FGAPI </span><span style="color: #D73A49">void</span><span style="color: #24292E">    FGAPIENTRY </span><span style="color: #6F42C1">glutSolidCube</span><span style="color: #24292E">( GLdouble size );</span></span><span class="line"><span style="color: #24292E">FGAPI </span><span style="color: #D73A49">void</span><span style="color: #24292E">    FGAPIENTRY </span><span style="color: #6F42C1">glutWireSphere</span><span style="color: #24292E">( GLdouble radius, GLint slices, GLint stacks );</span></span><span class="line"><span style="color: #24292E">FGAPI </span><span style="color: #D73A49">void</span><span style="color: #24292E">    FGAPIENTRY </span><span style="color: #6F42C1">glutSolidSphere</span><span style="color: #24292E">( GLdouble radius, GLint slices, GLint stacks );</span></span><span class="line"><span style="color: #24292E">FGAPI </span><span style="color: #D73A49">void</span><span style="color: #24292E">    FGAPIENTRY </span><span style="color: #6F42C1">glutWireCone</span><span style="color: #24292E">( GLdouble base, GLdouble height, GLint slices, GLint stacks );</span></span><span class="line"><span style="color: #24292E">FGAPI </span><span style="color: #D73A49">void</span><span style="color: #24292E">    FGAPIENTRY </span><span style="color: #6F42C1">glutSolidCone</span><span style="color: #24292E">( GLdouble base, GLdouble height, GLint slices, GLint stacks );</span></span></code></pre><p>（浪费了一下午的宝贵生命后）意识到 GLUT 是个被时代抛弃的玩意儿，不如趁早转到 SDL （虽然两者并不能直接这样比较……而且画圆柱也变得麻烦了）</p><p>然后又摸索了 n 久……发现虽然说是支持 OpenGL 1.0，但其实那套立即模式早就不支持了（请允悲），所以我们需要摸索一套不使用立即模式的绘画方式！</p><p>那么，（中二的）少年一起来学习着色器吧！</p><h2 id="Shaders"><a href="#Shaders" class="headerlink" title="Shaders"></a>Shaders</h2><p>一开始走了一点弯路，后来照着 <a href="//learnopengl-cn.github.io/">LearnOpenGL CN</a> 的教程学chao习daima。</p><p>（准确地说，这个教程教的是 OpenGL 3.2 的核心模式，不过基本上和 OpenGL ES 2.0 差异不大，而 WebGL 和 ES 2.0 差异也不大，所以是没有问题的啦！）</p><p>但是学了一会儿之后发现……呃……这套 API 和以前一样丑啊……</p><p>比如，如果我想画一些三角形……</p><pre class="shiki github-light" style="background-color: #fff" tabindex="0"><code><span class="line"><span style="color: #6A737D">// `vertices` stores vertex position, normal and texture position.</span></span><span class="line"></span><span class="line"><span style="color: #6F42C1">glGenVertexArrays</span><span style="color: #24292E">(</span><span style="color: #005CC5">1</span><span style="color: #24292E">, </span><span style="color: #D73A49">&amp;</span><span style="color: #24292E">vao);</span></span><span class="line"><span style="color: #6F42C1">glGenBuffers</span><span style="color: #24292E">(</span><span style="color: #005CC5">1</span><span style="color: #24292E">, </span><span style="color: #D73A49">&amp;</span><span style="color: #24292E">vbo);</span></span><span class="line"></span><span class="line"><span style="color: #6F42C1">glBindVertexArray</span><span style="color: #24292E">(vao);</span></span><span class="line"></span><span class="line"><span style="color: #6F42C1">glBindBuffer</span><span style="color: #24292E">(GL_ARRAY_BUFFER, vbo);</span></span><span class="line"><span style="color: #6F42C1">glBufferData</span><span style="color: #24292E">(GL_ARRAY_BUFFER, </span><span style="color: #D73A49">sizeof</span><span style="color: #24292E">(vertices[</span><span style="color: #005CC5">0</span><span style="color: #24292E">]) </span><span style="color: #D73A49">*</span><span style="color: #24292E"> vertices.</span><span style="color: #6F42C1">size</span><span style="color: #24292E">(), </span><span style="color: #D73A49">&amp;</span><span style="color: #24292E">vertices[</span><span style="color: #005CC5">0</span><span style="color: #24292E">], GL_STATIC_DRAW);</span></span><span class="line"><span style="color: #24292E">drawCount </span><span style="color: #D73A49">=</span><span style="color: #24292E"> vertices.</span><span style="color: #6F42C1">size</span><span style="color: #24292E">();</span></span><span class="line"></span><span class="line"><span style="color: #6F42C1">glVertexAttribPointer</span><span style="color: #24292E">(</span><span style="color: #005CC5">0</span><span style="color: #24292E">, </span><span style="color: #005CC5">3</span><span style="color: #24292E">, GL_FLOAT, GL_FALSE, </span><span style="color: #005CC5">8</span><span style="color: #24292E"> </span><span style="color: #D73A49">*</span><span style="color: #24292E"> </span><span style="color: #D73A49">sizeof</span><span style="color: #24292E">(</span><span style="color: #D73A49">float</span><span style="color: #24292E">), </span><span style="color: #005CC5">nullptr</span><span style="color: #24292E">);</span></span><span class="line"><span style="color: #6F42C1">glEnableVertexAttribArray</span><span style="color: #24292E">(</span><span style="color: #005CC5">0</span><span style="color: #24292E">);</span></span><span class="line"></span><span class="line"><span style="color: #6A737D">// ...</span></span></code></pre><p>怎么这么 old style 啊！还好可以把它们封装起来。</p><p>所以在核心模式下，画图的流程大概是：</p><ol><li>加载+编译 shader</li><li>加载 texture</li><li>加载模型（就是上面那坨魔法）</li><li>每帧更新的时候<ol><li>激活 shader</li><li>计算好 model 和 projection 矩阵，喂给 shader</li><li>画模型</li></ol></li></ol><p>emmm，好像也不是很麻烦？但问题是这种旧的 API 没有类型保证，所以很有可能传错指针或者忘记激活 shader ，导致各类莫名奇妙的事情发生。</p><p>（啊忘记了，节标题是着色器，那我们讲讲着色器吧）</p><p>简单来说，</p><ul><li>定点着色器会把模型中的坐标（世界坐标）变成屏幕上可以画出来的坐标；</li><li>片段着色器负责决定每个像素是怎么被着色的；<br>所以——都需要手写（请允悲）。</li></ul><p>还好这些东西都可以抄的（开心），而且渲染出来直接是 Phong 光照，一下真实了很多呢！</p><p>坏处是……如果传错参数，连 runtime error 都没有……</p><h2 id="Emscripten-revisited"><a href="#Emscripten-revisited" class="headerlink" title="Emscripten revisited"></a>Emscripten revisited</h2><p>那么现在问题是如何将这些代码跑在浏览器里呢？</p><p>官方教程说用 cmake 的同学可以</p><pre class="shiki github-light" style="background-color: #fff" tabindex="0"><code><span class="line"><span style="color: #6F42C1">emcmake</span><span style="color: #24292E"> </span><span style="color: #032F62">cmake</span><span style="color: #24292E"> </span><span style="color: #032F62">.</span></span></code></pre><p>但很显然，对于像我们这种有一些冷门依赖的项目是走不通的。所以还是只能手写 makefile：</p><pre class="shiki github-light" style="background-color: #fff" tabindex="0"><code><span class="line"><span style="color: #24292E">DIREM = bin-em</span></span><span class="line"><span style="color: #24292E">BINEM = </span><span style="color: #032F62">$(</span><span style="color: #24292E">DIREM</span><span style="color: #032F62">)</span><span style="color: #24292E">/Othello.html</span></span><span class="line"><span style="color: #24292E">OBJEM = </span><span style="color: #032F62">$(</span><span style="color: #24292E">DIREM</span><span style="color: #032F62">)</span><span style="color: #24292E">/main.o </span><span style="color: #032F62">$(</span><span style="color: #24292E">DIREM</span><span style="color: #032F62">)</span><span style="color: #24292E">/ai.o </span><span style="color: #032F62">$(</span><span style="color: #24292E">DIREM</span><span style="color: #032F62">)</span><span style="color: #24292E">/display.o </span><span style="color: #032F62">$(</span><span style="color: #24292E">DIREM</span><span style="color: #032F62">)</span><span style="color: #24292E">/element.o </span><span style="color: #032F62">$(</span><span style="color: #24292E">DIREM</span><span style="color: #032F62">)</span><span style="color: #24292E">/game.o </span><span style="color: #032F62">$(</span><span style="color: #24292E">DIREM</span><span style="color: #032F62">)</span><span style="color: #24292E">/io.o </span><span style="color: #032F62">$(</span><span style="color: #24292E">DIREM</span><span style="color: #032F62">)</span><span style="color: #24292E">/model.o </span><span style="color: #032F62">$(</span><span style="color: #24292E">DIREM</span><span style="color: #032F62">)</span><span style="color: #24292E">/player.o</span></span><span class="line"><span style="color: #24292E">EMXX = em++</span></span><span class="line"><span style="color: #24292E">EMXXFLAGS = -Wall -O2</span></span><span class="line"><span style="color: #24292E">EMLINKFLAGS = -s FULL_ES2=1 -s FULL_ES3=1 -s USE_GLFW=3 -s LLD_REPORT_UNDEFINED -s WASM=1 --preload-file resources --preload-file render --preload-file Settings</span></span></code></pre><p>所幸也不是很长（</p><p>这里有个问题是 js 天生不支持读本地文件，所以 filesystem 其实是 runtime 模拟的，要用 <code>--preload-file</code> 搞进去。</p><p>还有个问题是，原本跑在 native 上的版本是给渲染单独开了一个线程，怎么在 wasm 上办到呢？官方说可以用 pthread ，但是试了一下 bug 太多，而且还会牵连到 firefox 的各种 bug 和兼容性问题。简单起见我们就全塞到 main 线程算啦~（于是遍地都是 <code>#ifdef __EMSCRIPTEN__</code> 宏）</p><h2 id="GLFW"><a href="#GLFW" class="headerlink" title="GLFW"></a>GLFW</h2><p>哦对了，后来我没用 SDL ，转成 GLFW ，因为教程用的这个（</p><p>不过总体上来说都要比 GLUT 好，毕竟 main loop 是自己的了（</p><p>其他一些 callback 照虎画猫就行，不难的</p><h2 id="白嫖-Cloudflare-worker"><a href="#白嫖-Cloudflare-worker" class="headerlink" title="白嫖 Cloudflare worker"></a>白嫖 Cloudflare worker</h2><p>既然编译出来都是静态文件，自然可以用 Cloudflare 的 worker 去 serve。</p><h2 id="Roadmap"><a href="#Roadmap" class="headerlink" title="Roadmap"></a>Roadmap</h2><p>还需要填的坑：<br>[x] 把 Watch_Doge 的算法移植上去（哼虽然 botzone 上比分不高，但是和人下还是小菜一碟呢）（于 177cd06 完成）<br>[ ] （求求你）换个好看点的材质吧<br>[x] 一键掀桌！（于 13d09fa 完成）<br>[ ] <del>看看能不能用 <a href="//github.com/ocornut/imgui">ocornut&#x2F;imgui</a> 做一下 GUI 的一些控制</del>（我放弃了……实在没办法把环境配好）<br>[ ] 嵌入的网页稍微修整一下吧……</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;刚上大学的时候，我写了 &lt;a href=&quot;//github.com/owen8877/Othello/blob/master/report.md&quot;&gt;owen8877&amp;#x2F;Othello&lt;/a&gt; 作为我编程课的大作业。最近，当我想把它展示给其他人看的时候，却遇到了编译和链接上的困难，更别说大部分人没有 linux 环境了。想到移植到 Wasm 上应该是给不错的主意，那么这篇文章就梳理一下整体的流程和遇到的困难吧！&lt;/p&gt;
&lt;p&gt;发布请移步至 &lt;a href=&quot;//othello.xdroid.workers.dev/&quot;&gt;这里&lt;/a&gt; 。&lt;/p&gt;</summary>
    
    
    
    <category term="gizmo" scheme="https://blog.xdrd.me/categories/gizmo/"/>
    
    
    <category term="opengl" scheme="https://blog.xdrd.me/tags/opengl/"/>
    
    <category term="wasm" scheme="https://blog.xdrd.me/tags/wasm/"/>
    
    <category term="webgl" scheme="https://blog.xdrd.me/tags/webgl/"/>
    
  </entry>
  
  <entry>
    <title>训练神经网络给图片上色</title>
    <link href="https://blog.xdrd.me/2020/11/image-colorization/"/>
    <id>https://blog.xdrd.me/2020/11/image-colorization/</id>
    <published>2020-11-28T05:37:04.000Z</published>
    <updated>2020-12-22T23:40:16.609Z</updated>
    
    <content type="html"><![CDATA[<p>项目挂在 <a href="//github.com/owen8877/chroma-instance">owen8877&#x2F;chroma-instance</a> 上面了，是我在 UT 2020 Fall 的一门课的期末项目。</p><span id="more"></span><h2 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h2><p>大家直接去 github 页面上看好了，反正就是抄了抄两篇论文二合为一（</p><p>倒是在画图的时候学到了一点新的东西，原来还有专门画网络结构图的 dsl <a href="//github.com/HarisIqbal88/PlotNeuralNet">HarisIqbal88&#x2F;PlotNeuralNet</a>。设计的还不错，就是小 bug 太多，需要配合补丁使用（见 <a href="//github.com/HarisIqbal88/PlotNeuralNet/issues/82">这里</a> 或者 <a href="//github.com/owen8877/chroma-instance/blob/master/chroma_instance/source/plot_neural_net/generator.py">这里</a>）。</p><h2 id="总结与感想"><a href="#总结与感想" class="headerlink" title="总结与感想"></a>总结与感想</h2><p>效果非常一般，基本就是瞎上色（</p><p>可能是数据量太小了，也就在 5k 的图片上跑了 5 个 epoch，能学出什么呢（</p><p>还有就是 VGG 拓展出来的 encoder-decoder 架构感觉不太靠谱……也许换 U-net 会好一些。</p><p>本来还想部署到 heroku 上的，一看内存……告辞……</p><h2 id="吐槽"><a href="#吐槽" class="headerlink" title="吐槽"></a>吐槽</h2><p><del>哦我亲爱的读者啊，那需要吐槽的可真是太多了呢</del></p><ol><li>Keras 对于我来说已经是魔法般的存在了，想要手写一个组件嵌到 keras 里简直难度正无穷。</li></ol><ul><li>Keras 将很多 tensorflow 中的操作进行了包装（应该是为了保证不同的后端都能有相同的 interface），但这也导致了有很多绕来绕去的 internal call。</li><li>如果想要自己写一个新的 Model，不仅需要 override <code>call</code> 函数，而且还要处理好<ul><li><code>get_config(self)</code></li><li><code>from_config(cls, config)</code></li><li><code>compute_output_shape(self, input_shape)</code><br>等等一大堆问题，才能保证 keras 正常存读自定义的模型</li></ul></li><li>最麻烦的是 keras 有时候会自己计算 tensor 的大小，出现 <code>_keras_shape</code> 这样的玩意儿，但很多时候还是错的</li><li>所以结论是看似 Layers API 是最吼的，<strong>但是</strong> Lambda 层里面可能会遇到 <code>tf</code> 这种符号在 load 的时候没定义的问题……结果我现在也不知道该怎么解决，只好调用 <code>set_weights()</code> 绕过去了。</li></ul><ol start="2"><li>放大不仅可以用 <code>UpSampling2D</code>，还可以考虑一下 <code>Conv2DTranspose</code>。但是后者不仅维数不能自动推导（似乎是 keras 的 bug，import <code>tensorflow.python.keras</code> 可解决），而且还面临着训练困难的问题（</li><li>写了几天之后才发现 pipeline 只能接受定长的 tensor （嗯，我可能表达的不是特别清楚，就是说像物体分割这种可能导致变长输入&#x2F;输出的问题，其实只能设一个最大上限，然后把数据一股脑堆进去）</li><li>Commit history 真的是一把辛酸泪，到后面真的是语无伦次了——Colab 体验还极差，改代码需要经过本地修改-&gt;推到 github-&gt;在 colab 上拉下来-&gt;重新初始化 colab 内存-&gt;运行的步骤，硬生生把 python 写出了 C++ 的感觉。</li><li>到现在我还是没搞清楚 GAN 的两个 counterpart 是怎么设置的，为什么 loss function 和 trainable 属性要这么写[捂脸]Keras 能不能出个官方教程啊……</li><li>Colab 用到后面配额暂时用完了……只能开 pro 凑合一下了（有点小贵哦</li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;项目挂在 &lt;a href=&quot;//github.com/owen8877/chroma-instance&quot;&gt;owen8877&amp;#x2F;chroma-instance&lt;/a&gt; 上面了，是我在 UT 2020 Fall 的一门课的期末项目。&lt;/p&gt;</summary>
    
    
    
    <category term="gizmo" scheme="https://blog.xdrd.me/categories/gizmo/"/>
    
    
    <category term="deep learning" scheme="https://blog.xdrd.me/tags/deep-learning/"/>
    
    <category term="keras" scheme="https://blog.xdrd.me/tags/keras/"/>
    
    <category term="tensorflow" scheme="https://blog.xdrd.me/tags/tensorflow/"/>
    
  </entry>
  
  <entry>
    <title>线性代数如此容易（棒读</title>
    <link href="https://blog.xdrd.me/2020/11/linear-algebra-made-easy/"/>
    <id>https://blog.xdrd.me/2020/11/linear-algebra-made-easy/</id>
    <published>2020-11-14T17:43:28.000Z</published>
    <updated>2020-12-22T23:40:45.446Z</updated>
    
    <content type="html"><![CDATA[<p>今早在朋友圈看到一张梗图：</p><p><img src="/images/2020-11-linear-algebra-made-easy/meme.jpg" alt="你学废了吗？"></p><p>然后转发到群里，出现了如下的沙雕对话：</p><blockquote><p>谁暴搜一下10^8个<br>看看还有啥<br><em>草</em><br><em>哦好多</em><br><em>我怎么贴比较好</em></p></blockquote><span id="more"></span><p>写了个简单的 <a href="//repl.it/@owen8877/TastyWrithingRedundancy">代码</a> 跑了一下发现 <a href="https://gist.github.com/owen8877/1b9eb3c8a556e40342f7ba189de200e8">解</a> 还挺多。然后群友看了一眼，讨论继续：</p><blockquote><p>| 9  3 | * | 9  3 | &#x3D; | 99  33 |<br>| 6  2 | * | 6  2 | &#x3D; | 66  22 |<br>这组真tm有意思<br><em>草还真是对的</em><br>我想想<br>搜出来100组<br>至少有4合1<br>ab，cd等价于ac，bd等价于dc，ba等价于db，ca<br><em>呃我想想</em><br><em>什么意思呢</em><br>就是你把矩阵转置一下和转180度是trivial的变换<br>我再看看细节<br><em>这不是很显然吧</em></p></blockquote><p>对，其实 180 旋转确实可以 trivial 地导出另一组解，但是转置并不行。因为如果 <code>X*Y=Z</code> 而且 <code>X^T*Y^T=Z^T</code> 的话，其实 <code>X</code> 和 <code>Y</code> 就可交换了。不过熟悉线性代数的朋友们应该知道，可交换等价于可被同时上三角化，所以其实我们可以推出两组恒等式：</p><p>假设 <code>X=(a, b; c, d)</code> 且 <code>Y=(e, f; g, h)</code>，我们有</p><ol><li><code>bg=cf</code> （感谢 Bai 同学的证明）</li><li><code>(a-d)/c=(e-h)/g</code> （这个不是太好证明）</li></ol><p>最后贴几组比较有意思的结果吧233</p><pre class="shiki github-light" style="background-color: #fff" tabindex="0"><code><span class="line"><span style="color: #24292e">| 2  3 |   | 2  3 |   | 22  33 |</span></span><span class="line"><span style="color: #24292e">|      | * |      | = |        |</span></span><span class="line"><span style="color: #24292e">| 6  9 |   | 6  9 |   | 66  99 |</span></span><span class="line"><span style="color: #24292e"></span></span><span class="line"><span style="color: #24292e">| 10  13 |   | 10  13 |   | 1010  1313 |</span></span><span class="line"><span style="color: #24292e">|        | * |        | = |            |</span></span><span class="line"><span style="color: #24292e">| 70  91 |   | 70  91 |   | 7070  9191 |</span></span><span class="line"><span style="color: #24292e"></span></span><span class="line"><span style="color: #24292e">| 20  18 |   | 20  18 |   | 2020  1818 |</span></span><span class="line"><span style="color: #24292e">|        | * |        | = |            |</span></span><span class="line"><span style="color: #24292e">| 90  81 |   | 90  81 |   | 9090  8181 |</span></span></code></pre><p>（就算是这样自己平方的解也有几十组……）</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;今早在朋友圈看到一张梗图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/2020-11-linear-algebra-made-easy/meme.jpg&quot; alt=&quot;你学废了吗？&quot;&gt;&lt;/p&gt;
&lt;p&gt;然后转发到群里，出现了如下的沙雕对话：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;谁暴搜一下10^8个&lt;br&gt;看看还有啥&lt;br&gt;&lt;em&gt;草&lt;/em&gt;&lt;br&gt;&lt;em&gt;哦好多&lt;/em&gt;&lt;br&gt;&lt;em&gt;我怎么贴比较好&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="gizmo" scheme="https://blog.xdrd.me/categories/gizmo/"/>
    
    
    <category term="matrix product" scheme="https://blog.xdrd.me/tags/matrix-product/"/>
    
    <category term="linear algebra" scheme="https://blog.xdrd.me/tags/linear-algebra/"/>
    
  </entry>
  
  <entry>
    <title>「日历记事本」模组</title>
    <link href="https://blog.xdrd.me/2020/07/calendar-as-diary-module/"/>
    <id>https://blog.xdrd.me/2020/07/calendar-as-diary-module/</id>
    <published>2020-07-09T18:25:21.000Z</published>
    <updated>2020-07-10T19:21:48.627Z</updated>
    
    <content type="html"><![CDATA[<p>其实在上一篇 <a href="/2020/05/calendar-as-diary-roadmap/" title="「日历记事本」规划">「日历记事本」规划</a> 之后不久我就把插件陆陆续续写得差不多了，但是由于懒癌发作一直没有更新博客 QAQ ……</p><p>那么目前完成的模组有三个流媒体和一个 coding 时间跟踪工具。</p><span id="more"></span><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li><a href="#bilibili">Bilibili</a></li><li><a href="#netflix">Netflix</a></li><li><a href="#wakatime">Wakatime</a></li><li><a href="#youtube">Youtube</a></li></ul><h2 id="bilibili">Bilibili</h2><p>B 站的数据是从他们家的历史记录页面抓取的，从审查元素页面可以看到有如下的请求：</p><pre class="shiki github-light" style="background-color: #fff" tabindex="0"><code><span class="line"><span style="color: #6F42C1">curl</span><span style="color: #24292E"> </span><span style="color: #032F62">&#39;https://api.bilibili.com/x/v2/history?pn=1&amp;ps=100&amp;jsonp=jsonp&#39;</span></span></code></pre><p>那么返回的数据是一个 json 对象，内含一堆 <del>看不懂</del> 的条目……里面比较重要的其实也就下面这些：</p><ul><li>aid: 就是以前的 av 号</li><li>bvid: B 站后来又搞了个 bv 号，想了想那就拿这个当主键吧</li><li>duration: 这个应该是总长吧</li><li>page: 包含观看分 p 号和观看时间等</li><li>progress: 观看的长度；-1 表示的是看完了</li><li>redirect_link: 链接，其实可以用 av&#x2F;bv 号生成</li><li>title: 标题</li><li>view_at: 观看时间，是 Unix 时间戳格式的</li></ul><p>这边比较复杂的一个问题是有些视频是分 p 的，所以需要考虑到可能看完第 1p 之后看了第 2p 导致有两个条目这样的情况。还有的问题就是 progress 可能是 -1 所以这个时候要用 duration 替代……</p><p><del>不过总的来说 B 站的数据真的是很良心了（全靠同行衬托），下面的两个流媒体网站才是真正的灾难（</del></p><h2 id="netflix">Netflix</h2><p>Netflix 只有精确到天且看完节目的记录，所以只能解析 html 了……</p><pre class="shiki github-light" style="background-color: #fff" tabindex="0"><code><span class="line"><span style="color: #6F42C1">curl</span><span style="color: #24292E"> </span><span style="color: #032F62">&#39;https://www.netflix.com/viewingactivity&#39;</span></span></code></pre><p>虽然不是 json 格式，所幸数据都在一个 table 里面，还算比较规整，只要拿 scraper 稍微搞搞就可以了。其他应该也没什么坑点，日期用正则表达式 parse 一下就行（</p><h2 id="wakatime">Wakatime</h2><p>Wakatime 做的还不错，至少有 <a href="//wakatime.com/developers/">api</a> 和对应的文档（虽然写得不怎么样……）</p><pre class="shiki github-light" style="background-color: #fff" tabindex="0"><code><span class="line"><span style="color: #6F42C1">curl</span><span style="color: #24292E"> </span><span style="color: #032F62">&#39;https://wakatime.com/api/v1/users/current/durations?date=YYYY-MM-DD&#39;</span></span><span class="line"><span style="color: #6F42C1">curl</span><span style="color: #24292E"> </span><span style="color: #032F62">&#39;https://wakatime.com/api/v1/users/current/summaries?start=YYYY-MM-DD&amp;end=YYYY-MM-DD&amp;cache=false&#39;</span></span></code></pre><p>有个小问题（其实每个插件都会遇到）是，比如我正在看视频或者进行某个项目，那么如果这个活动持续时间超过了服务器抓取历史记录的间隔市场的话，就会抓取到两份历史记录——但是它们指向的是同一个活动。因此一个<a href="//github.com/owen8877/calendar-as-diary/issues/1">修复的小技巧</a>就是过滤掉结束时间太近的那些活动；这样会引入一丢丢延迟，但是总体上来说应该没问题。</p><h2 id="youtube">Youtube</h2><p><del>谷歌简直是业界毒瘤x</del></p><pre class="shiki github-light" style="background-color: #fff" tabindex="0"><code><span class="line"><span style="color: #6F42C1">curl</span><span style="color: #24292E"> </span><span style="color: #032F62">&#39;https://myactivity.google.com/activitycontrols/youtube?view=item&#39;</span></span></code></pre><p>Youtube 的历史记录要难搞很多，因为首先它可能会受到时区影响（因为精确到了分钟），其次它“智能”地将同一天观看的内容整合在一起，中间用另一个 div 元素分开，所以还要动点脑筋才能把日期读出来……像观看进度这种东西都是靠缩略图上的进度条读出来的，实在受不了这种奇技淫巧x</p><p>目前为止<a href="//github.com/owen8877/calendar-as-diary/issues/3">时区的问题</a>还不太能搞定……还是等有时间再修复吧x</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;其实在上一篇 &lt;a href=&quot;/2020/05/calendar-as-diary-roadmap/&quot; title=&quot;「日历记事本」规划&quot;&gt;「日历记事本」规划&lt;/a&gt; 之后不久我就把插件陆陆续续写得差不多了，但是由于懒癌发作一直没有更新博客 QAQ ……&lt;/p&gt;
&lt;p&gt;那么目前完成的模组有三个流媒体和一个 coding 时间跟踪工具。&lt;/p&gt;</summary>
    
    
    
    <category term="gizmo" scheme="https://blog.xdrd.me/categories/gizmo/"/>
    
    
    <category term="calendar-as-diary" scheme="https://blog.xdrd.me/tags/calendar-as-diary/"/>
    
    <category term="rust" scheme="https://blog.xdrd.me/tags/rust/"/>
    
  </entry>
  
  <entry>
    <title>「日历记事本」规划</title>
    <link href="https://blog.xdrd.me/2020/05/calendar-as-diary-roadmap/"/>
    <id>https://blog.xdrd.me/2020/05/calendar-as-diary-roadmap/</id>
    <published>2020-05-26T21:49:42.000Z</published>
    <updated>2020-06-01T16:56:29.055Z</updated>
    
    <content type="html"><![CDATA[<p>本文是 2020 年暑假学习 rust 计划的一部分。目前项目存放在 <a href="//github.com/owen8877/calendar-as-diary">owen8877&#x2F;calendar-as-diary</a>，欢迎围观<del>和吐槽</del>。</p><h2 id="动机"><a href="#动机" class="headerlink" title="动机"></a>动机</h2><p>逐渐发现 Google Calendar 是个好东西（其实所有日历软件都是个好东西），用来计划日常生活、提醒工作安排真是非常方便，在计划之余还能形成一本自然的日记本。于是我就想，如果能 <strong>自动</strong> 记录一些生活琐事（一些懒得规划的事情），那就再好不过了——比如看视频、锻炼身体，因为在完成之余还要誊到日历上真的是非常麻烦。</p><p>市面上有一些比较成熟的自动化软件&#x2F;服务，比如 ifttt 、 zapier 和被苹果收购的 workflow ，它们的特点是功能广泛，要完成和日历的对接也是非常容易。但是缺点也比较明显，如果是像上文提出的那种特殊需求，有时候就有点力不从心了。因为很多站点并不开放让用户自己查询自己的历史数据，因此根本无法从流程自动化的服务中提取这些信息——需要说明的是这一点和 GDPR 并不矛盾，因为后者只要把所有东西塞到一个 json 再打个 tarball 扔给用户就完事了。</p><p>目前来看，可以借由已有服务完成的有：</p><ul><li><a href="//ifttt.com/applets/416458p-add-strava-runs-and-rides-to-google-calendar">将 Strava 上跑步和骑车记录同步到 GC</a></li><li>将 Zapier 上的天气预报信息同步到 GC</li></ul><p>（呃……还真是少的可怜呢）因此自己造轮子就势在必行啦！</p><span id="more"></span><h2 id="规划"><a href="#规划" class="headerlink" title="规划"></a>规划</h2><h3 id="数据源"><a href="#数据源" class="headerlink" title="数据源"></a>数据源</h3><ul><li>流视频类：netflix, bilibili, youtube</li><li>游戏类：steam, uplay, epic games</li><li>写<del>摸鱼</del>代码类：wakatime</li></ul><h3 id="技术栈"><a href="#技术栈" class="headerlink" title="技术栈"></a>技术栈</h3><ul><li>以 rust 为主要使用的语言</li><li>webserver 选用 <a href="//github.com/SergioBenitez/Rocket">SergioBenitez&#x2F;Rocket</a></li><li>request 库 <a href="//github.com/seanmonstar/reqwest">seanmonstar&#x2F;reqwest</a></li><li>json 解析用 <a href="//github.com/serde-rs/json">serde-rs&#x2F;json</a></li><li>xml 解析用 <a href="//github.com/tafia/quick-xml">tafia&#x2F;quick-xml</a></li></ul><h3 id="学习资料"><a href="#学习资料" class="headerlink" title="学习资料"></a>学习资料</h3><p>目前在看 <a href="https://doc.rust-lang.org/stable/book/">官方教程</a>（还挺有意思）。IDE 选用 CLion 加 rust 插件支持（噫已经离不开 jetbrains 全家桶了吗）。安装过程查看了 <a href="https://wiki.archlinux.org/index.php/Rust">archlinux 关于 rust 的文档</a>，用 pacman 安装了 rustup 然后更新了 toolchains 。</p><h2 id="纯净的吐槽"><a href="#纯净的吐槽" class="headerlink" title="纯净的吐槽"></a>纯净的吐槽</h2><p>有模式匹配哎（有 haskell 内味了……）相应地 enum 类型也变得很强大了</p><p>ownership 这个挺有意思……之后再慢慢琢磨到底是怎么回事……（看这个 ownership transfer 我已经可以预见到之后为了使编译通过要头昏脑胀了x</p><p><code>&quot;Hello World!&quot;.into()</code> 是个什么鬼玩意儿（看了一下代码……呃好吧，这个设计还可以吧）结果因为不能编译被迫使用 <code>&quot;Hello World!&quot;.to_string()</code></p><p>rust 这套 reference borrowing 也太激进了吧，non-const 方法（C++ 用语，rust 的话应该叫 <code>&amp;mut self</code>）也算 mutable reference 吗（想想确实没毛病</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文是 2020 年暑假学习 rust 计划的一部分。目前项目存放在 &lt;a href=&quot;//github.com/owen8877/calendar-as-diary&quot;&gt;owen8877&amp;#x2F;calendar-as-diary&lt;/a&gt;，欢迎围观&lt;del&gt;和吐槽&lt;/del&gt;。&lt;/p&gt;
&lt;h2 id=&quot;动机&quot;&gt;&lt;a href=&quot;#动机&quot; class=&quot;headerlink&quot; title=&quot;动机&quot;&gt;&lt;/a&gt;动机&lt;/h2&gt;&lt;p&gt;逐渐发现 Google Calendar 是个好东西（其实所有日历软件都是个好东西），用来计划日常生活、提醒工作安排真是非常方便，在计划之余还能形成一本自然的日记本。于是我就想，如果能 &lt;strong&gt;自动&lt;/strong&gt; 记录一些生活琐事（一些懒得规划的事情），那就再好不过了——比如看视频、锻炼身体，因为在完成之余还要誊到日历上真的是非常麻烦。&lt;/p&gt;
&lt;p&gt;市面上有一些比较成熟的自动化软件&amp;#x2F;服务，比如 ifttt 、 zapier 和被苹果收购的 workflow ，它们的特点是功能广泛，要完成和日历的对接也是非常容易。但是缺点也比较明显，如果是像上文提出的那种特殊需求，有时候就有点力不从心了。因为很多站点并不开放让用户自己查询自己的历史数据，因此根本无法从流程自动化的服务中提取这些信息——需要说明的是这一点和 GDPR 并不矛盾，因为后者只要把所有东西塞到一个 json 再打个 tarball 扔给用户就完事了。&lt;/p&gt;
&lt;p&gt;目前来看，可以借由已有服务完成的有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;//ifttt.com/applets/416458p-add-strava-runs-and-rides-to-google-calendar&quot;&gt;将 Strava 上跑步和骑车记录同步到 GC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;将 Zapier 上的天气预报信息同步到 GC&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;（呃……还真是少的可怜呢）因此自己造轮子就势在必行啦！&lt;/p&gt;</summary>
    
    
    
    <category term="gizmo" scheme="https://blog.xdrd.me/categories/gizmo/"/>
    
    
    <category term="calendar-as-diary" scheme="https://blog.xdrd.me/tags/calendar-as-diary/"/>
    
    <category term="rust" scheme="https://blog.xdrd.me/tags/rust/"/>
    
  </entry>
  
  <entry>
    <title>USTC 字体 CDN 服务被墙</title>
    <link href="https://blog.xdrd.me/2020/05/ustc-font-blocked/"/>
    <id>https://blog.xdrd.me/2020/05/ustc-font-blocked/</id>
    <published>2020-05-25T17:52:35.000Z</published>
    <updated>2020-05-25T18:01:22.798Z</updated>
    
    <content type="html"><![CDATA[<p>真是活久见，第一次看到除了影视版权原因以外被反向墙的案例（</p><p>今早准备更新博客的时候，发现自己的站点打不开了（什么？在国外 github 还能被墙？）看了一眼控制台，发现大概是一个字体的 css 加载不出来了。定睛一看：</p><pre class="shiki github-light" style="background-color: #fff" tabindex="0"><code><span class="line"><span style="color: #24292e">fonts.lug.ustc.edu.cn/css?family=Source+Code+Pro</span></span></code></pre><p>这就，很尴尬，因为 <a href="https://lug.ustc.edu.cn/wiki/lug/services/googlefonts">中科大的站点</a> 还是好好的——当然不能排除仅仅是由于他们的 CDN 服务器挂了的可能性，但是结合近日国内某重要会议事件，大概率是这种冷门访问被丢包了（</p><p>查了一下似乎很难有 fallback 的方案，而且现有的方案都是已知加载不出来之后的行动——但是这里是直接被丢包，Firefox 还在戆戆地等，这就很麻烦了。</p><p>所以最后怎么办呢？只好先换成 googleapis ，毕竟还有 cloudflare 撑腰，国内的小伙伴应该不至于完全打不开（</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;真是活久见，第一次看到除了影视版权原因以外被反向墙的案例（&lt;/p&gt;
&lt;p&gt;今早准备更新博客的时候，发现自己的站点打不开了（什么？在国外 github 还能被墙？）看了一眼控制台，发现大概是一个字体的 css 加载不出来了。定睛一看：&lt;/p&gt;
&lt;pre class=&quot;shik</summary>
      
    
    
    
    <category term="site" scheme="https://blog.xdrd.me/categories/site/"/>
    
    
    <category term="ustc" scheme="https://blog.xdrd.me/tags/ustc/"/>
    
    <category term="cdn" scheme="https://blog.xdrd.me/tags/cdn/"/>
    
  </entry>
  
  <entry>
    <title>AMD Yes 之深度学习</title>
    <link href="https://blog.xdrd.me/2020/05/rocm/"/>
    <id>https://blog.xdrd.me/2020/05/rocm/</id>
    <published>2020-05-25T16:43:53.000Z</published>
    <updated>2020-05-25T17:40:31.571Z</updated>
    
    <content type="html"><![CDATA[<p>继上次坚定不移的 <a href="/2020/03/amd-yes/" title="AMD Yes!">AMD Yes!</a> 之后，玩游戏之余的我发现了一个大问题……那就是我要拿手上的显卡完成 Deep Learning 课程的作业……</p><p>查了一下资料，似乎 AMD 官方正在推行一个叫做 <a href="https://rocmdocs.amd.com/en/latest/index.html">ROCm</a> 的项目。啥意思，什么原理？我也不懂，总之赶紧完成作业就好啦（flag</p><span id="more"></span><p>尝试了一下 <code>yay rocm-dkms</code> ，然后看了一会儿 archlinux 的文档，然后等了一下午编译 llvm ……呃跑不起来（就很尴尬了</p><p>最终！还是划了一小块分区安装官方支持的 Ubuntu ，直接 apt 下个编译好的包就可以了ww虽然还是掉进了一堆坑里……总之想尝试的朋友们建议出门右转老老实实买老黄家的卡——毕竟连 tensorflow 都要安装一个额外的包，而像 pytorch 就根本没有 official build （摔</p><p>（于是过了一个多月我终于把报告口胡完了……享受一下最后一个暑假……</p><hr><p>哦对了，似乎 rocm 还有不少 bug ，因为拿 cpu 和 gpu train 一个 rnn 的结果是不一样的……很明显 gpu train 出来的 loss 一直不下降（一通操作猛如虎，一看 loss 根本没变）。倒是 cnn 那块可能比较稳定（用的人多了 bug 修好了吧）。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;继上次坚定不移的 &lt;a href=&quot;/2020/03/amd-yes/&quot; title=&quot;AMD Yes!&quot;&gt;AMD Yes!&lt;/a&gt; 之后，玩游戏之余的我发现了一个大问题……那就是我要拿手上的显卡完成 Deep Learning 课程的作业……&lt;/p&gt;
&lt;p&gt;查了一下资料，似乎 AMD 官方正在推行一个叫做 &lt;a href=&quot;https://rocmdocs.amd.com/en/latest/index.html&quot;&gt;ROCm&lt;/a&gt; 的项目。啥意思，什么原理？我也不懂，总之赶紧完成作业就好啦（flag&lt;/p&gt;</summary>
    
    
    
    <category term="Linux" scheme="https://blog.xdrd.me/categories/Linux/"/>
    
    
    <category term="amd graphics card" scheme="https://blog.xdrd.me/tags/amd-graphics-card/"/>
    
    <category term="rocm" scheme="https://blog.xdrd.me/tags/rocm/"/>
    
  </entry>
  
  <entry>
    <title>0202 年安装 Windows 记录</title>
    <link href="https://blog.xdrd.me/2020/04/install-windows/"/>
    <id>https://blog.xdrd.me/2020/04/install-windows/</id>
    <published>2020-04-12T15:07:56.000Z</published>
    <updated>2020-04-12T15:44:36.111Z</updated>
    
    <content type="html"><![CDATA[<p>补一下上次 <a href="/2020/03/amd-yes/" title="AMD Yes!">安装了新电脑</a> 的一些后续步骤吧。</p><p>由于这次没有附赠的授权了（而且贫穷 UT 没买批量授权……），只能偷偷摸摸用 KMS 激活了（（（</p><p>首先从 itellyoumsdn 的 ed2k 链接下载镜像（居然花了整整两天才下载完），然后刻到 U 盘上（现在 rufus 都更新这么多了），再插到新电脑上设好引导安装就可以了。</p><span id="more"></span><p>谁能想到第一个安装的软件居然是 uplay，steam 和 epic games 呢！</p><p>然后把游戏镜像拷过去……由于没有网线而且小区网络 AP 隔离，所以只能用移动硬盘了（才发现 Hitman 2 有 200G 多……天呐）</p><p><del>全境封锁，启动！进入任务！一通操作居然挂了，游戏退出！</del> 总之画质和流畅度都没有问题，温度也还正常。</p><hr><p>然后是 Windows Terminal + chocolatey 组合，全面向 Linux 看齐（</p><p>大概用包管理器安装了那些呢？</p><blockquote><p>7zip, cpuz, gpuz, hwi, dismplusplus, weasel, telegram, rufus, vlc …</p></blockquote><p>哦对了，还可以 <a href="https://superuser.com/questions/7327/how-to-add-a-custom-search-engine-to-firefox">通过添加书签的方式自定义搜索引擎</a>（学习了</p><hr><h2 id="杂"><a href="#杂" class="headerlink" title="杂"></a>杂</h2><p>然后是用 dism++ 进行简单调教（咦，用户最终许可协议？有这回事情吗？），包括关闭小娜</p><p>好在 UT 买了 Office 365 的授权，但是给的安装包默认全部安装（呃……）。查了一下可以通过 <a href="https://docs.microsoft.com/zh-cn/deployoffice/configuration-options-for-the-office-2016-deployment-tool?redirectedfrom=MSDN#excludeapp-element">xml 配置文件</a> 的方式 <a href="https://roov.org/2015/12/office-365-diy/">定义安装行为</a>。</p><p>还有是小狼毫如果通过 chocolatey 安装的话似乎有点问题，好像是缺了一个 default.yaml 。另一个无关问题见 <a href="https://github.com/rime/weasel/issues/228">这里</a>。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;补一下上次 &lt;a href=&quot;/2020/03/amd-yes/&quot; title=&quot;AMD Yes!&quot;&gt;安装了新电脑&lt;/a&gt; 的一些后续步骤吧。&lt;/p&gt;
&lt;p&gt;由于这次没有附赠的授权了（而且贫穷 UT 没买批量授权……），只能偷偷摸摸用 KMS 激活了（（（&lt;/p&gt;
&lt;p&gt;首先从 itellyoumsdn 的 ed2k 链接下载镜像（居然花了整整两天才下载完），然后刻到 U 盘上（现在 rufus 都更新这么多了），再插到新电脑上设好引导安装就可以了。&lt;/p&gt;</summary>
    
    
    
    <category term="Windows" scheme="https://blog.xdrd.me/categories/Windows/"/>
    
    
    <category term="windows" scheme="https://blog.xdrd.me/tags/windows/"/>
    
    <category term="chocolatey" scheme="https://blog.xdrd.me/tags/chocolatey/"/>
    
  </entry>
  
</feed>
